{"/_app":{"title":" App","data":{"":""}},"/guides/git":{"title":"Git","data":{"":"Git is a version control system, allowing changes to be effectively tracked, merged, and reverted.As our resources are hosted on GitHub, it can be incredibly useful to learn how to create your own repository to track changes and keep up-to-date. If you plan on making your own changes to our resources, this will allow you to keep your own changes and prevent loss of data.\nRefer to GitHub's guide to setting up Git.\nYou can use a Git GUI client like GitKraken to improve your workflow and more easily maintain changes."}},"/guides/pnpm":{"title":"pnpm","data":{"":"pnpm is a fast and disk space efficient package manager, serving as an alternative to npm and yarn.\nEnsure you have installed Node.js.\nOpen a command-line terminal (e.g. Terminal, Command Prompt).\nEnter npm install -g pnpm to globally install the package.\nYou can install dependencies with pnpm using pnpm i.\n\nYou can reference package.json files for available scripts, i.e.\n\"scripts\": {\n\"start\": \"vite\",\n\"watch\": \"vite build --watch\",\n\"build\": \"tsc && vite build\",\n\"preview\": \"vite preview\",\n\"format\": \"prettier --write \\\"./src/**/*.{ts,tsx,css}\\\"\"\n},\nUsing the example above pnpm build will run the build script for the given package."}},"/":{"title":"Introduction","data":{"":"Here you can find all of the official documentation for resources developed by the Overextended team.If you feel like the documentation is lacking in some department then feel free to go onto that page and click the \"Edit this page\" at the bottom and submit a Pull Request.","support-our-team#Support our team":"Our projects will always remain free and open-source, with our core developers working voluntarily.\nIf you love what we do and want to help us continue, why not show your appreciation with a donation?","creator-codes#Creator codes":"Creator codes allow Tebex stores to share a percentage of a purchase with us, while giving a discount to the customer. We make these deals to advertise trusted creators who meet our criteria.\nResources are highly configurable or, preferably, source-available.\nWe trust that customers will be given assistance.\nThe creator is a known member of our community.\n\n\nStore\tCode\tDiscount\tLink\tAndyyy\tox20\t20%\thttps://andyyy.tebex.io/\tBerkie's Workshop\tox10\t10%\thttps://berkie.tebex.io/\tDolu Mods\toverextended\t15%\thttps://dolu.tebex.io/\tElectus Scripts\tox10\t10%\thttps://store.electus-scripts.com/\tLoaf Scripts\tox5\t5%\thttps://store.loaf-scripts.com/\tOT Studios\tox10\t10%\thttps://store.otstudios.net/ox\tWasabi Scripts\tOX20\t20%\thttps://store.wasabiscripts.com/\nYou can apply a creator code at checkout under \"Support A Creator\"."}},"/ox_core":{"title":"Ox Core","data":{"":"An experimental framework for FiveM. Limited support and breaking changes guaranteed.\nThis resource does not have a stable (v1.0) release; breaking changes are likely.\nDocumentation may not be kept updated in some cases.","installation#Installation":"We strongly recommend referring to Guides for setting up Git, Node.js, and pnpm.","install-all-resource-dependencies#Install all resource dependencies.":"oxmysql\nox_lib\nfivem-appearance\nox_appearance","download-a-release-or-build-the-source-code#Download a release or build the source code.":"git clone https://github.com/overextended/ox_core.git\ncd ox_core/web\npnpm i\npnpm build","install-optional-dependencies#Install optional dependencies.":"These resources aren't required but provide additional functionality.\nox_inventory\nnpwd\npefcl","optional-configure-pefcl#(Optional) Configure pefcl":"If using it with ox_inventory, open pefcl/config.json and enable framework integration.\n\"frameworkIntegration\": {\n\"enabled\": true,\n\"resource\": \"ox_inventory\",\n\"syncInitialBankBalance\": false\n},","importing-into-resources#Importing into resources":"","lua#Lua":"Lua imports can be defined as part of fxmanifest, or loaded with the load function.\n\n\nclient_scripts {\n'@ox_core/imports/client.lua',\n'client/main.lua',\n}\n\nserver_scripts {\n'@oxmysql/lib/MySQL.lua',\n'@ox_core/imports/server.lua',\n'server/main.lua',\n}\n\n\n\nlocal file = ('imports/%s.lua'):format(IsDuplicityVersion() and 'server' or 'client')\nlocal import = LoadResourceFile('ox_core', file)\nlocal chunk = assert(load(import, ('@@ox_core/%s'):format(file)))\nchunk()","javascript#JavaScript":"To use ox_core with your JS/TS resources you'll need to use our npm package, allowing you to import core functions with full type and intellisense support.","config#Config":"Resource configuration is handled using convars.\n# Players must have a valid identifier to join the server. Used to fetch userid from the database.\nset ox:primaryIdentifier \"fivem\"\n\n# Set the number of active characters a user can have registered.\nsetr ox:characterSlots 5\n\n# Enables debug and development features. Should only be used in a development environment.\nsetr ox:debug 0\n\n# Disable death system handle by core.\nsetr ox:deathSystem 0\n\n# Disable the spawn selection.\nsetr ox:spawnSelect 0"}},"/ox_core/Player/Client":{"title":"Client","data":{"":"When ox_core is imported into a resource it will create the player global.\nIf player is nil, then the client has not yet selected a character and spawned.Example:\nprint(json.encode(player, { indent = true }))\n\nplayer?: table\nname: string\nfirstname: string\nlastname: string\nuserid: number\ncharid: number\ngroups: table\ngender: string"}},"/ox_core/Player/Client/callbacks":{"title":"Callbacks","data":{"":"","oxgetstatus#ox:getStatus":"lib.callback.await('ox:getStatus', delay, targetId, statusName)\n\ndelay: number\ntargetId: number\nThe server id for the player to get statuses for.\n\n\nstatusName?: string\nThe name of the status (i.e. hunger). Can be omitted to return all statuses.","oxgetlicense#ox:getLicense":"lib.callback.await('ox:getLicense', delay, licenseName, targetId)\n\ndelay: number\nlicenseName: string\nThe name of the license to get data for. Can be omitted to return all licenses.\n\n\ntargetId?: number\nThe server id to get license data for, defaulting to the current player.","oxgetnearbyvehicles#ox:getNearbyVehicles":"lib.callback.register('ox:getNearbyVehicles', function(radius)\nReturns an array of vehicle netids within a given radius of the player's location.\nradius?: number\nThe radius from the player's location to return vehicles."}},"/ox_core/Player/Client/events":{"title":"Events","data":{"":"","client-events#Client events":"","oxplayerloaded#ox:playerLoaded":"Triggered once the player has selected a character and spawned.\nAddEventHandler('ox:playerLoaded', function(data) end)","oxplayerlogout#ox:playerLogout":"Triggered when the player enters character selection if they were previously playing a character.\nAddEventHandler('ox:playerLogout', function() end)","oxstatustick#ox:statusTick":"Triggered every 1000ms interval, when status values are updated internally.\nAddEventHandler('ox:statusTick', function(statuses) end)","networked-events#Networked events":"","oxsetgroup#ox:setGroup":"Triggered when the player's grade in a group is modified on the server with player.setGroup.\nRegisterNetEvent('ox:setGroup', function(group, grade) end)","oxlicenseadded#ox:licenseAdded":"Triggered when the player has been granted a license.\nRegisterNetEvent('ox:licenseAdded', function(name) end)","oxlicenseremoved#ox:licenseRemoved":"Triggered when the player's license is revoked.\nRegisterNetEvent('ox:licenseRemoved', function(name) end)"}},"/ox_core/Player/Server":{"title":"Server","data":{"":"","oxgetplayer#Ox.GetPlayer":"Return an instance of OxPlayer for the given player source.\n\n\nlocal player = Ox.GetPlayer(source)\nprint(json.encode(player, { indent = true }))\n\n\n\nimport { GetPlayer } from '@overextended/ox_core/server';\n\nconst player = GetPlayer(source);\nconsole.log(JSON.stringify(player));","oxgetplayerbyfilter#Ox.GetPlayerByFilter":"Return the first OxPlayer that matches the filter properties.\n\n\nlocal filter = { phoneNumber = '556-560-6609' }\nlocal player = Ox.GetPlayerByFilter(filter)\nprint(json.encode(player, { indent = true }))\n\n\n\nimport { GetPlayerByFilter } from '@overextended/ox_core/server';\n\nconst filter = { phoneNumber: '556-560-6609' };\nconst player = GetPlayerByFilter(filter);\nconsole.log(JSON.stringify(player));","oxgetplayers#Ox.GetPlayers":"Returns an array containing all players. Methods will not be applied if the first argument is false.\nPlayers can be filtered to only return players that match the given properties, or groups.\n\n\n-- Get an array containing all players in the police or sheriff groups, with grade 3 or higher.\nlocal filter = { groups = {['sheriff'] = 3, ['police'] = 3} })\nlocal players = Ox.GetPlayers(usemetatable, filter)\n\nfor i = 1, #players do\nlocal player = players[i]\nprint(json.encode(player, { indent = true }))\nend\n\n\n\nimport { GetPlayers } from '@overextended/ox_core/server';\n\n// Get an array containing all players in the police or sheriff groups, with grade 3 or higher.\nconst filter = { groups: { sheriff: 3, police: 3 } })\n\nconst players = GetPlayers(useclass, filter);\nfor (let i = 0; i < players.length; i++) {\nconst player = players[i];\nconsole.log(JSON.stringify(player));\n}"}},"/ox_core/Player/Server/events":{"title":"Events","data":{"":"","server-events#Server events":"","oxplayerloaded#ox:playerLoaded":"Triggered after a player has selected a character.\nAddEventHandler('ox:playerLoaded', function(source, userid, charid) end)","oxsetgroup#ox:setGroup":"Triggered when a player's grade in a group is modified with player.setGroup.\nAddEventHandler('ox:setGroup', function(source, group, grade) end)","oxplayerlogout#ox:playerLogout":"Triggered when a player logs out from their current character or disconnects from the server.\nAddEventHandler('ox:playerLogout', function(source, userid, charid) end)","oxcharacterdeleted#ox:characterDeleted":"Triggered when a player has deleted a character.\nAddEventHandler('ox:characterDeleted', function(source, userid, charid) end)","oxlicenseadded#ox:licenseAdded":"Triggered when a player has been granted a license.\nAddEventHandler('ox:licenseAdded', function(source, name) end)","oxlicenseremoved#ox:licenseRemoved":"Triggered when a player's license is revoked.\nAddEventHandler('ox:licenseRemoved', function(source, name) end)","networked-events#Networked events":"","oxplayerdeath#ox:playerDeath":"Triggered on player death and revival.\nRegisterNetEvent('ox:playerDeath', function(isDead) end)","oxsetplayerinservice#ox:setPlayerInService":"Can be triggered to set a player as \"in service\" for a specific group they are a member of.\nRegisterNetEvent('ox:setPlayerInService', function(group) end)"}},"/ox_core/Player/Server/methods":{"title":"Methods","data":{"":"These functions are inherited from the Player class.","playerset#player.set":"Update the player's metadata, optionally syncing it with the client.\nplayer.set(key, value, replicated)\n\nkey: string\nvalue: any\nreplicated?: boolean","playerget#player.get":"Get a value from the player's metadata, or omit the argument to get all metadata.\nplayer.get(key)\n\nkey?: string","playergetstate#player.getState":"Return the player's statebag.\nplayer.getState()","playergetcoords#player.getCoords":"Return the player's position.\nplayer.getCoords()","playersetgroup#player.setGroup":"Updates the player's grade for the given group. Any value below 1 will remove the group from the player.\nplayer.setGroup(group, grade)\n\ngroup: string\ngrade?: number","playergetgroup#player.getGroup":"Returns the player's current grade for a given group.\nplayer.getGroup()","playergetgroups#player.getGroups":"Returns an object of all groups the player is in, with the current grade as the value.\nplayer.getGroups()","playerhasgroup#player.hasGroup":"Check if the player is a member of a given group, and returns the matching group name and grade.\nThe filter can be a string, array, or object where key is the group, and value is the minimum grade.\nplayer.hasGroup(filter)\n\nfilter: string | string[] | { [string]: number }","playersetstatus#player.setStatus":"Set the current value for a status (i.e. hunger, thirst).\nplayer.setStatus(name, value)\n\nname: string\nvalue: number","playeraddstatus#player.addStatus":"Add the given amount to the total value for a status (i.e. hunger, thirst).\nplayer.addStatus(name, value)\n\nname: string\nvalue: number","playerremovestatus#player.removeStatus":"Remove the given amount from the total value for a status (i.e. hunger, thirst).\nplayer.removeStatus(name, value)\n\nname: string\nvalue: number","playergetlicenses#player.getLicenses":"Get all licenses for the player.\nplayer.getLicenses()","playergetlicense#player.getLicense":"Get the license of the given name for the player, as an object containing license information.\nplayer.getLicense(name)\n\nname: string","playeraddlicense#player.addLicense":"Grants a license to the player and triggers 'ox:licenseAdded' on the server and client.\nplayer.addLicense(name)\n\nname: string","playerremovelicense#player.removeLicense":"Revokes a license from the player and triggers 'ox:licenseRemoved' on the server and client.\nplayer.removeLicense(name)\n\nname: string","playergetplayersinscope#player.getPlayersInScope":"Return an array of all player id's inside the player's scope.\nplayer.getPlayersInScope()","playerisplayerinscope#player.isPlayerInScope":"Check if the given source is inside the player's scope.\nplayer.isPlayerInScope(target)\n\ntarget: number","playertriggerscopedevent#player.triggerScopedEvent":"player.triggerScopedEvent(eventName, ...)\n\neventName: string\n...?: any[]"}},"/ox_core/Vehicle/Server":{"title":"Server","data":{"":"","oxgetvehicle#Ox.GetVehicle":"Return an instance of OxVehicle for the given entity.\nlocal vehicle = Ox.GetVehicle(entity)\nprint(json.encode(vehicle, { indent = true }))","oxgetvehicles#Ox.GetVehicles":"Returns an array containing all vehicles. Methods will not be applied if the first argument is false.\nlocal vehicles = Ox.GetVehicles(usemetatable)\n\nfor i = 1, #vehicles do\nlocal vehicle = vehicles[i]\nprint(json.encode(vehicle, { indent = true }))\nend","oxcreatevehicle#Ox.CreateVehicle":"Spawns a vehicle and returns the instance of OxVehicle.\nIf the first argument is a number, it will attempt to spawn a vehicle from the database with a matching id.\nlocal vehicleId = MySQL.scalar.await('SELECT id FROM vehicles WHERE owner = ? LIMIT 1', { player.charid })\n\nif vehicleId then\nlocal coords = player.getCoords()\nlocal vehicle = Ox.CreateVehicle(vehicleId, vector3(coords.x, coords.y + 1.0, coords.z) , GetEntityHeading(player.ped))\n\nif vehicle then\nprint(json.encode(vehicle, { indent = true }))\nend\nend\nIf the first argument is a table and the owner property is a number, or nil, the vehicle will be added to the database.\nSetting the owner as false creates a non-persistent vehicle.\nlocal vehicle = Ox.CreateVehicle({\nmodel = 'sultanrs',\nowner = player.charid,\n}, player.getCoords(), GetEntityHeading(player.ped))"}},"/ox_core/Vehicle/Server/callbacks":{"title":"Callbacks","data":{"":"","oxgetnearbyvehicles#ox:getNearbyVehicles":"Get all vehicles within range of the target player.\nlib.callback.await('ox:getNearbyVehicles', playerId, radius)\n\nplayerId: number\nradius?: number"}},"/ox_core/Vehicle/Server/methods":{"title":"Methods","data":{"":"These functions are inherited from the Vehicle class.","vehicleset#vehicle.set":"Sets the vehicle's metadata for key to the given value.\nvehicle.set(key, value)\n\nkey: string\nvalue: any","vehicleget#vehicle.get":"Get a value from the vehicles's metadata, or omit the argument to get all metadata.\nvehicle.get(key)\n\nkey?: string","vehiclegetstate#vehicle.getState":"Return the vehicle's statebag.\nvehicle.getState()","vehiclegetcoords#vehicle.getCoords":"Return the vehicle's position.\nvehicle.getCoords()","vehicledespawn#vehicle.despawn":"Despawns the vehicle but doesn't save it or update the stored value.","vehicledelete#vehicle.delete":"Remove the vehicle from the database and despawns the entity.\nvehicle.delete()","vehiclesetstored#vehicle.setStored":"Updates the vehicle's \"stored\" value and optionally despawns it.\nvehicle.setStored(value, despawn)\n\nvalue?: string\ndespawn?: boolean","vehiclesetowner#vehicle.setOwner":"Sets the vehicle's owner, matching a charid or nil to set it as unowned.\nvehicle.setOwner(owner)\n\nowner?: number","vehiclesetgroup#vehicle.setGroup":"Sets the vehicle's group, which can be used for garage restrictions, unowned group vehicles, etc.\nvehicle.setGroup(group)\n\ngroup?: string","vehiclesetplate#vehicle.setPlate":"Sets the vehicle's plate, used in the database to ensure uniqueness. Does not necessarily match the plate property (i.e. fake plates).\nPlate is always formatted to 8 characters.\nvehicle.setPlate(plate)\n\nplate: string"}},"/ox_core/concepts":{"title":"Concepts","data":{"":"We'll try to explain some technical but core concepts used in ox_core here.","classes#Classes":"Lua doesn't have support for true classes, but rather prototype-based inheritance.\nA prototype can hold its own variables and methods, which another object (an instance) can reference or call.\n-- OxPlayer will hold all inherited variables and methods for instances of it.\nlocal OxPlayer = {}\n\n-- Sets the \"index metamethod\" of OxPlayer to reference itself.\n-- This is how instances will know to look up the table.\nOxPlayer.__index = OxPlayer\n\n-- Set a new metatable on the table passed to the function.\n-- The important code here is { __index = OxPlayer }.\nfunction OxPlayer.new(player)\nreturn setmetatable(player, OxPlayer)\nend\n\n-- Using the `:` syntax will pass the object as the first parameter.\nfunction OxPlayer:getUsername()\nreturn self.username\nend\n\n-- Create our instance of OxPlayer.\nlocal player = OxPlayer.new({\nusername = 'Bob the Builder'\n})\n\n-- This is the same as OxPlayer.getUsername(player).\nlocal username = player:getUsername()\n\n-- 'Bob the Builder'\nprint(username)\nWhen using the imported classes in your resources you can treat the methods as if you are calling a regular function.\nlocal player = Ox.GetPlayer(playerId)\nprint(player.getUsername())"}},"/ox_doorlock":{"title":"Ox Doorlock","data":{"":"A door management resource that can be used standalone or alongside ox_core, qb-core, and es_extended.","installation#Installation":"We strongly recommend referring to Guides for setting up Git, Node.js, and pnpm.","install-all-resource-dependencies#Install all resource dependencies.":"oxmysql\nox_lib","download-a-release-or-build-the-source-code#Download a release or build the source code.":"git clone https://github.com/overextended/ox_doorlock.git\ncd ox_doorlock/web\npnpm i\npnpm build","install-optional-dependencies#Install optional dependencies.":"These resources aren't required but provide additional functionality.\nox_target or qb-target","opening-the-ui#Opening the UI":"If you have installed and started the resource, you can use /doorlock to open the UI.\nIf the cursor is displayed but not the UI then you have not built it.\nYou may not be authorised to use the command.\nEnter test_ace player.1 command.doorlock in the server console (replace 1 with your server id).","convert-doors#Convert doors":"Door configuration files written for nui_doorlock (and its fork, qb-doorlock) can be automatically added to your MySQL database.\nAny files with the .lua extension placed in the ox_doorlock/convert directory will be read on resource start.\nConversion cannot be guaranteed, especially if the config was not written for nui_doorlock."}},"/ox_doorlock/Client/functions":{"title":"Functions","data":{"":"","pickclosestdoor#pickClosestDoor":"Attempt to pick the lock of the closest door. Dependant on server-side checks and may fail.\nexports.ox_doorlock:pickClosestDoor()","useclosestdoor#useClosestDoor":"Interact with the closest door. Dependant on server-side checks and may fail.\nexports.ox_doorlock:useClosestDoor()"}},"/ox_doorlock/Server/events":{"title":"Handlers","data":{"":"These events are safe to trigger and handle in other scripts.","ox_doorlocksetstate#ox_doorlock:setState":"Can be triggered to lock or unlock a door.\nTriggerEvent('ox_doorlock:setState', doorId, state)\n\ndoorId: number\nstate: 0 or 1\n\nThese events shouldn't be triggered by any other scripts.","ox_doorlockstatechanged#ox_doorlock:stateChanged":"Triggered when a doors state is updated.\nAddEventHandler('ox_doorlock:stateChanged', function(source, doorId, state, usedItem) end)\n\nsource: number or nil\ndoorId: number\nstate: 0 or 1\nusedItem: string or false"}},"/ox_doorlock/Server/functions":{"title":"Functions","data":{"":"Gets data for a door with the given id, matching the id for the database entry.","getdoor#getDoor":"exports.ox_doorlock:getDoor(id)","parameters#Parameters":"id: number","returns#Returns":"table\n\nGets data for a door with the given name, matching the name for the database entry.","getdoorfromname#getDoorFromName":"exports.ox_doorlock:getDoorFromName(name)","parameters-1#Parameters":"name: string","returns-1#Returns":"table"}},"/ox_doorlock/settings":{"title":"Door settings","data":{"":"","general#General":"Door name\nUsed to easily identify the door.\n\n\nPasscode\nDoor can be unlocked by anybody by using the code or phrase.\n\n\nAutolock interval\nDoor will be locked after x seconds.\n\n\nInteract distance\nDoor can only be used when within x metres.\n\n\nDoor rate\nDoor movement speed for sliding/garage/automatic doors, or swinging doors when locked.\n\n\nLocked\nSets the door as locked by default.\n\n\nDouble\nDoor is a set of two doors, controlled together.\n\n\nAutomatic\nSliding/garage/automatic door.\n\n\nLockpick\nDoor can be lockpicked when interacting with a targeting resource.\n\n\nHide UI\nNo indicators (i.e. icon, text) will display on the door.","characters#Characters":"Character Id\nCharacter identifier used by a framework (i.e. player.charid, xPlayer.identifier, Player.CitizenId).","groups#Groups":"Group\nFramework dependent, referring to jobs, gangs, etc.\n\n\nGrade\nThe minimum grade to allow access for the group (0 to allow all).","items#Items":"Item\nName of the item.\n\n\nMetadata type\nRequires metadata support (i.e. ox_inventory) to check slot.metadata.type","lockpick#Lockpick":"Difficulty\nSets the skillcheck difficulty (see docs).\n\n\nArea size\nCustom difficulty area size.\n\n\nSpeed multiplier\nCustom difficulty idicator speed."}},"/ox_fuel":{"title":"Ox Fuel","data":{"":"A simple fuel resource meant to replace LegacyFuel or serve as a showcase for using petrol cans as an item.","installation#Installation":"","install-all-resource-dependencies#Install all resource dependencies.":"ox_lib\nox_inventory","download-a-release-or-clone-the-source-code#Download a release or clone the source code.":"git clone https://github.com/overextended/ox_fuel.git","install-optional-dependencies#Install optional dependencies.":"These resources aren't required but provide additional functionality.\nox_target","get-vehicle-fuel-amount#Get vehicle fuel amount":"local fuel = Entity(vehicleId).state.fuel","set-vehicle-fuel-amount#Set vehicle fuel amount":"Entity(vehicleId).state.fuel = fuelAmount"}},"/ox_fuel/Client/functions":{"title":"Functions","data":{"":"","setmoneycheck#setMoneyCheck":"Override the built-in money check.\nexports.ox_fuel:setMoneyCheck(method)","parameters#Parameters":"method: function(): number","example#Example":"exports.ox_fuel:setMoneyCheck(function()\nlocal accounts = ESX.GetPlayerData().accounts\n\nfor i = 1, #accounts do\nif accounts[i].name == 'bank' then\nreturn accounts[i].money\nend\nend\n\nreturn 0\nend)"}},"/ox_fuel/Server/functions":{"title":"Functions","data":{"":"","setpaymentmethod#setPaymentMethod":"Override the built-in payment method.\nexports.ox_fuel:setPaymentMethod(method)","parameters#Parameters":"method: function(): boolean?","example#Example":"exports.ox_fuel:setPaymentMethod(function(playerId, amount)\nlocal xPlayer = ESX.GetPlayerFromId(playerId)\nlocal bankAmount = xPlayer.getAccount('bank').money\n\nif bankAmount >= amount then\nxPlayer.removeAccountMoney('bank', amount)\nreturn true\nend\n\nTriggerClientEvent('ox_lib:notify', source, {\ntype = 'error',\ndescription = locale('not_enough_money', amount - bankAmount)\n})\nend)"}},"/ox_inventory":{"title":"Ox Inventory","data":{"":"A slot-based inventory with item metadata for \"item uniqueness\".\nIf you are replacing a built-in framework inventory there will be compatibility errors.\nIf you are unwilling or incapable of resolving incompatibilities, do not install this resource.","installation#Installation":"We strongly recommend referring to Guides for setting up Git, Node.js, and pnpm.","install-all-resource-dependencies#Install all resource dependencies":"oxmysql\nox_lib","download-a-release-or-build-the-source-code#Download a release or build the source code.":"git clone https://github.com/overextended/ox_inventory.git\ncd ox_inventory/web\npnpm i\npnpm build","install-optional-dependencies#Install optional dependencies":"These resources aren't required but provide additional functionality.\nox_target","resource-start-order#Resource start order":"It's important for your resources to start in a logical order to prevent errors from missing dependencies.\nstart oxmysql   # this should be one of the first resources\nstart ox_lib\nstart framework # the name of your framework (i.e. ox_core, es_extended, qb-core)\nstart ox_target\nstart ox_inventory","config#Config":"Resource configuration is handled using convars.\n### Shared\n\n# Activate specific event handlers and functions (supported: ox, esx, qb, nd)\nsetr inventory:framework \"esx\"\n\n# Number of slots for player inventories\nsetr inventory:slots 50\n\n# Maximum carry capacity for players, in grams (frameworks may override this)\nsetr inventory:weight 30000\n\n# Integrated support for qtarget/ox_target stashes, shops, etc\n# Note: qtarget is deprecated, a future update may drop support (ox_target only, or gated features)\nsetr inventory:target false\n\n# Jobs with access to police armoury, evidence lockers, etc\nsetr inventory:police [\"police\", \"sheriff\"]\n\n### Client\n\n# The URL to load item images from\nsetr inventory:imagepath \"nui://ox_inventory/web/images\"\n\n# Weapons will reload after reaching 0 ammo\nsetr inventory:autoreload false\n\n# Blur the screen while accessing the inventory\nsetr inventory:screenblur true\n\n# Default hotkeys to access primary and secondary inventories, and hotbar\nsetr inventory:keys [\"F2\", \"K\", \"TAB\"]\n\n# Enable control action when inventory is open\nsetr inventory:enablekeys [249]\n\n# Weapons must be aimed before shooting\nsetr inventory:aimedfiring false\n\n# Show a list of all nearby players when giving items\nsetr inventory:giveplayerlist false\n\n# Toggle weapon draw/holster animations\nsetr inventory:weaponanims true\n\n# Toggle item notifications (add/remove)\nsetr inventory:itemnotify true\n\n# Disable drop markers and spawn a prop instead\nsetr inventory:dropprops true\n\n# Set the default model used for drop props\nsetr inventory:dropmodel \"prop_med_bag_01b\"\n\n# Disarm the player if an unexpected weapon is in use (i.e. did not use the weapon item)\nsetr inventory:weaponmismatch true\n\n# Ignore weapon mismatch checks for the given weapon type (e.g. ['WEAPON_SHOVEL', 'WEAPON_HANDCUFFS'])\nsetr inventory:ignoreweapons []\n\n# Suppress weapon and ammo pickups\nsetr inventory:suppresspickups 1\n\n### Server\n\n# Compare current version to latest release on GitHub\nset inventory:versioncheck true\n\n# Stashes will be wiped after remaining unchanged for the given time\nset inventory:clearstashes \"6 MONTH\"\n\n# Discord webhook url, used for imageurl metadata content moderation (image embeds)\nset inventory:webhook \"\"\n\n# Logging via ox_lib (0: Disable, 1: Standard, 2: Include AddItem/RemoveItem, and all shop purchases)\nset inventory:loglevel 1\n\n# Item prices fluctuate in shops\nset inventory:randomprices true\n\n# Loot will randomly generate inside unowned vehicles and dumpsters\nset inventory:randomloot true\n\n# Minimum job grade to remove items from evidence lockers\nset inventory:evidencegrade 2\n\n# Trim whitespace from vehicle plates when checking owned vehicles\nsetr inventory:trimplate true\n\n# Set the contents of randomly generated inventories\n# [item name, minimum, maximum, loot chance]\nset inventory:vehicleloot [\n[\"cola\", 1, 1],\n[\"water\", 1, 1],\n[\"garbage\", 1, 2, 50],\n[\"panties\", 1, 1, 5],\n[\"money\", 1, 50],\n[\"money\", 200, 400, 5],\n[\"bandage\", 1, 1]\n]\n\nset inventory:dumpsterloot [\n[\"mustard\", 1, 1],\n[\"garbage\", 1, 3],\n[\"money\", 1, 10],\n[\"burger\", 1, 1]\n]\n\n# Set items to sync with framework accounts\nset inventory:accounts [\"money\"]","framework-incompatibilities#Framework incompatibilities":"Any frameworks with their own built-in inventory, item, or weapon systems are expected to have compatibility issues.\nMoney as an item may conflict with banking/account systems.\nYou can sync these values with server.syncInventory.\n\n\n\nRefer to issue #1297 for known compatibility issues.","using-an-unsupported-framework#Using an unsupported framework":"If your framework does not have official support you'll have to implement it yourself.\nIf you're replacing an existing/built-in inventory system this may be complicated, but is a fairly simple task otherwise.This setup is highly opinionated and rigid, so it's up to your own ability as a developer to make it work.","setup-a-bridge-submodule#Setup a bridge submodule":"You'll want to set the target framework first - this could be the name, an acronym, or just \"custom\".\nsetr inventory:framework \"custom\"\nCopy the ox directory from the bridge directory and give it the name you used above.The bare minimum functions and event handlers are added here, but you'll need to change them to match your framework; we can't provide any help here. You can refer to the other framework bridges if you need inspiration.","setup-database-references#Setup database references":"Take a look at the mysql module. You'll need to reference your player/vehicle tables and id columns.\nelseif shared.framework == 'custom' then\nplayerTable = 'characters' -- table storing player / character data\nplayerColumn = 'charid'    -- primary key for identifying the character (i.e. identifier, citizenid, id)\nvehicleTable = 'vehicles'  -- table storing owned vehicle data\nvehicleColumn = 'id'       -- primary key for identifying the vehicle (i.e. plate, vin, id)\nend","esx#ESX":"You will need a compatible version of ESX Legacy (1.6.0 or higher).\nYou can convert player inventories with convertinventory esx.\nAll items in the database will be migrated to the internal item data.\nAlways restart the resource when items are migrated!","qbcore#QBCore":"Support for QBCore is extremely limited, highly incompatible, and unlikely to improve.\n\nYou can use any \"version\" of qb-core that supports QBCore.Functions.AddPlayerMethod.\nYou can convert player and vehicle inventories with convertinventory qb.\nAll QB.Shared.Items will be migrated to the internal item data.\nAlways restart the resource when items are migrated!","qbox-project#Qbox Project":"Qbox Project GitHub\nQbox txAdmin Recipe\n\nQbox is a fork of QBCore developed by former team members and contributors to QBCore.\nImproved security and performance of qb resources.\nIntegrated support for ox_inventory, with improved compatibility.\nSupport for ox_lib and ox_target."}},"/ox_inventory/Events/Client":{"title":"Client events","data":{"":"This is not a comprehensive list of events and is missing events intended for internal use only.","triggers#Triggers":"These events are safe to trigger and handle in other scripts.","ox_inventorydisarm#ox_inventory:disarm":"Can be triggered to force the player to disarm.\nTriggerClientEvent('ox_inventory:disarm', playerId, noAnim)","handlers#Handlers":"These events shouldn't be triggered by any other scripts.","ox_inventoryupdateinventory#ox_inventory:updateInventory":"Triggered after inventory slots have been updated, included on load.\nChanges is a table containing all updated slot data indexed by slotId. Empty slots are \"false\".\nAddEventHandler('ox_inventory:updateInventory', function(changes) end)\n\nchanges: table<number, table | false>","ox_inventorycurrentweapon#ox_inventory:currentWeapon":"Triggered when a weapon is equipped or its metadata is altered.\nAddEventHandler('ox_inventory:currentWeapon', function(weapon) end)\n\nweapon?: table","ox_inventoryitemcount#ox_inventory:itemCount":"Triggered when the amount of an item in the player's inventory is changed.\nNote: Not available for ESX, use esx:addInventoryItem or esx:removeInventoryItem.\nAddEventHandler('ox_inventory:itemCount', function(itemName, totalCount) end)"}},"/ox_inventory/Events/Server":{"title":"Server events","data":{"":"This is not a comprehensive list of events and is missing events intended for internal use only.","handlers#Handlers":"These events shouldn't be triggered by any other scripts.","ox_inventoryopenedinventory#ox_inventory:openedInventory":"Triggered after an inventory is opened by a player.\nAddEventHandler('ox_inventory:openedInventory', function(playerId, inventoryId) end)\n\nplayerId: number\ninventoryId: string","ox_inventorycloseinventory#ox_inventory:closeInventory":"Triggered after an inventory is closed by a player.\nAddEventHandler('ox_inventory:closeInventory', function(playerId, inventoryId) end)"}},"/ox_inventory/Frameworks/esx":{"title":"ESX","data":{"":"","compatibility#Compatibility":"Ox Inventory is a complete replacement for existing item, inventory, and weapon systems; it is inherently incompatible with ESX and any resources that rely on default behaviour.\nLoadouts do not exist and weapons are treated as items.\nStandard shops and stashes (i.e. esx_shops, esx_weaponshop, and esx_policejob).\nResources that alter the default esx inventory or provide a ui (i.e. esx_trunkinventory, esx_inventoryhud).","installation#Installation":"Use a compatible version of ESX Legacy (1.6.0+).\nModify your server.cfg, starting ox_inventory immediately after es_extended.\n\n\nstart oxmysql\nstart ox_lib\nstart es_extended\nstart qtarget\nstart ox_inventory","convert-esx-inventory-data#Convert ESX inventory data":"Start the server and type convertinventory esx into the server console.\nOptionally, type convertinventory esxproperty into the server console.\nRestart the server once conversion is complete.","optional-optimisation#Optional optimisation":"All item related functions from xPlayer, such as xPlayer.getInventoryItem, have been modified for compatibility purposes; however they are considered deprecated.The reasoning is fairly simple - there's now additional function references and overhead to consider. Fortunately, the new Inventory functions can be used directly and offer a great deal of improvements over the old ones.You should read through the functions section for further information, but the following should give you a decent idea.\n\n\nif xPlayer.getInventoryItem('acetone').count > 2 and xPlayer.getInventoryItem('antifreeze').count > 4 and xPlayer.getInventoryItem('sudo').count > 9 then\nxPlayer.removeInventoryItem(\"acetone\", 3)\nxPlayer.removeInventoryItem(\"antifreeze\", 5)\nxPlayer.removeInventoryItem(\"sudo\", 10)\nend\n\n\nAdd the following code somewhere in your resource to cache the exports metatable.\nlocal ox_inventory = exports.ox_inventory\nYou will be able to reference any functions exposed through the export.\nlocal items = ox_inventory:Search(source, 'count', {'acetone', 'antifreeze', 'sudo'})\nif items and items.acetone > 2 and items.antifreeze > 4 and items.sudo > 9 then\nox_inventory:RemoveItem(source, 'acetone', 3)\nox_inventory:RemoveItem(source, 'antifreeze', 5)\nox_inventory:RemoveItem(source, 'sudo', 10)\nend"}},"/ox_inventory/Frameworks/qb":{"title":"QBCore","data":{"":"QBCore support is experimental and cannot work as a \"drag and drop\" solution due to many incompatibilities.","compatibility#Compatibility":"Ox Inventory provides a complete suite of tools to replace the built-in items and inventory system from QBCore, and is not intended to be used with resources designed around it.\nStashes used by qb-inventory and its forks do not work, but can possibly be converted.\nRemove qb-inventory (or similar), or qb-core will not function properly.\nRemove qb-shops and qb-weapons, as they depend on qb-inventory and conflict.\nWeapon holstering and draw animations (like in qb-smallresources) may break our own methods.","qbox-project#Qbox Project":"Qbox is a fork of QBCore being developed by a team of former contributors and developers on QBCore. The team is focused on improving performance and security, as well as converting resources to support our resources (mainly ox_lib and ox_inventory).We strongly advise using Qbox as an alternative to QBCore.\nQbox Project GitHub\nQbox Project Discord","installation#Installation":"Setup qb-core or qbox.\nEdit your server.cfg.\nAdd setr inventory:framework \"qb\" before starting your resources.\nStart ox_inventory immediately after qb-core.","convert-qbcore#Convert QBCore":"If you have existing player data, you will need to convert it to a compatible format.\nStart the server and type convertinventory qb into the server console.\nRestart the server once conversion is complete.","optional-optimisation#Optional optimisation":"All item related functions from Player, such as Player.Functions.GetItemByName, have been modified for compatibility purposes; however they are considered deprecated.The reasoning is fairly simple - there's now additional function references and overhead to consider. Fortunately, the new Inventory functions can be used directly and offer a great deal of improvements over the old ones.You should read through the functions section for further information, but the following should give you a decent idea.\n\n\nlocal acetone = Player.Functions.GetItemByName('acetone')\nlocal antifreeze = Player.Functions.GetItemByName('antifreeze')\nlocal sudo = Player.Functions.GetItemByName('sudo')\nif acetone?.amount > 2 and antifreeze?.amount > 4 and sudo?.amount > 9 then\nPlayer.Functions.RemoveItem(\"acetone\", 3)\nPlayer.Functions.RemoveItem(\"antifreeze\", 5)\nPlayer.Functions.RemoveItem(\"sudo\", 10)\nend\n\n\nAdd the following code somewhere in your resource to cache the exports metatable.\nlocal ox_inventory = exports.ox_inventory\nYou will be able to reference any functions exposed through the export.\nlocal items = ox_inventory:Search(source, 'count', {'acetone', 'antifreeze', 'sudo'})\nif items and items.acetone > 2 and items.antifreeze > 4 and items.sudo > 9 then\nox_inventory:RemoveItem(source, 'acetone', 3)\nox_inventory:RemoveItem(source, 'antifreeze', 5)\nox_inventory:RemoveItem(source, 'sudo', 10)\nend"}},"/ox_inventory/Functions/Client":{"title":"Client","data":{"":"","openinventory#openInventory":"Opens an inventory using the passed data.\nexports.ox_inventory:openInventory(invType, data)\n\ninvType: string\n'player'\n'shop'\n'stash'\n'crafting'\n'container'\n'drop'\n'glovebox'\n'trunk'\n'dumpster'\n\n\ndata: number or string or table\n\n\n\nOpen the target player's inventory.\nexports.ox_inventory:openInventory('player', 3)\n\n\nOpen the fourth \"General Store\" location.\nexports.ox_inventory:openInventory('shop', { type = 'General', id = 4 })\n\n\nOpen the first stash in data/stashes.\nexports.ox_inventory:openInventory('stash', 1)\nOpen a custom stash (created on the server with RegisterStash).\nexports.ox_inventory:openInventory('stash', 'society_police')\nOpen a stash with a specific owner.\nexports.ox_inventory:openInventory('stash', { id = 'police_locker', owner = 'license:xxxxxxxx' })","opennearbyinventory#openNearbyInventory":"If possible opens the nearby player's inventory.The player trying to open the inventory must be able to open their own and\nif the player does not have a police job, the target player must be fatally injured or\nplaying one of the death anims.\nexports.ox_inventory:openNearbyInventory()","closeinventory#closeInventory":"Closes the player's inventory.\nexports.ox_inventory:closeInventory()","items#Items":"Returns a table of all registered items. The format is as defined in data/items.lua.\nexports.ox_inventory:Items()\nThe following snippet can be used in crafting resources such as okokCrafting or core_crafting, rather than retrieving information from the server.\nlocal itemNames = {}\n\nfor item, data in pairs(exports.ox_inventory:Items()) do\nitemNames[item] = data.label\nend","useitem#useItem":"Uses the passed item, then triggers the callback function.\nShould be calling during item callbacks to utilise the builtin methods (server checks, progress bar, etc.).\nexports.ox_inventory:useItem(data, cb)\n\ndata: table\ncb?: function\n\n\nexports('bandage', function(data, slot)\nlocal playerPed = PlayerPedId()\nlocal maxHealth = GetEntityMaxHealth(playerPed)\nlocal health = GetEntityHealth(playerPed)\n\n-- Does the ped need to heal?\nif health < maxHealth then\n-- Use the bandage\nexports.ox_inventory:useItem(data, function(data)\n-- The item has been used, so trigger the effects\nif data then\nSetEntityHealth(playerPed, math.min(maxHealth, math.floor(health + maxHealth / 16)))\nlib.notify({description = 'You feel better already'})\nend\nend)\nelse\n-- Don't use the item\nlib.notify({type = 'error', description = 'You don\\'t need a bandage right now'})\nend\nend)","useslot#useSlot":"Uses the item in the given inventory slot.\nexports.ox_inventory:useSlot(slot)\n\nslot: number","setstashtarget#setStashTarget":"Forces the secondary-inventory key to open the passed inventory. Can be useful to enable inventory access while standing inside a marker.\nexports.ox_inventory:setStashTarget(id, owner)\n\nid: string or number\nStash id.\n\n\nowner?: string or number\n\nExample:\nexports.ox_inventory:setStashTarget('motel5', 'bobsmith')","getcurrentweapon#getCurrentWeapon":"Get data for the currently equipped weapon.\nexports.ox_inventory:getCurrentWeapon()\nYou can also listen for changes to the current weapon using an event handler.\nAddEventHandler('ox_inventory:currentWeapon', function(currentWeapon)\nCurrentWeapon = currentWeapon\nend)\n\ncurrentWeapon?: table\nammo?: string Name of the item used as ammo.\nhash: number\nlabel: string\nmelee: boolean\nmetadata: table\nammo?: number Amount of ammo loaded into the weapon.\ncomponents?: table Array of component item names, used to apply weapon components.\ndurability?: number\nregistered?: string Name of the player that bought the weapon at a shop.\nserial?: string\n\n\nname: string Name of the item.\nslot: number\nweight: number","displaymetadata#displayMetadata":"Sets a metadata property to display in the tooltip.\nexports.ox_inventory:displayMetadata(metadata, value)\n\nmetadata: table or string\nIf metadata is a string then it's the metadata property you want to display, value is not optional then.\nCan be a table of key-value pairs, key being the metadata property and value being the label for that property.\n\n\nvalue?: string\nLabel for the string metadata property to be displayed.\n\n\n\nExample:\nexports.ox_inventory:displayMetadata('mustard', 'Mustard')\n\nexports.ox_inventory:displayMetadata({\nmustard = 'Mustard',\nketchup = 'Ketchup'\n})","weaponwheel#weaponWheel":"Enables the weapon wheel, but disables the use of inventory items.Mostly used for weaponised vehicles, though could be called for \"minigames\"\nlocal exports.ox_inventory:weaponWheel(state)\n\nstate: boolean","search#Search":"Searches the inventory for an item, or list of items, with the result varying based on the first argument.\nexports.ox_inventory:Search(search, item, metadata)\n\nsearch: 'slots' or 'count'\n'slots' returns a table of slots where the item was found at.\n'count' returns the count of the specified item in player's inventory. If searching for multiple items\nreturns key-value pairs of itemName = count.\n\n\nitem: table or string\nCan be a single item name or array of item names.\n\n\nmetadata?: table or string\nIf metadata is provided as a string it will search the item's metadata.type property.\n\n\n\nCount\n\n\nlocal count = exports.ox_inventory:Search('count', 'water')\nprint('You have '..count.. ' water')\n\n\n\nlocal inventory = exports.ox_inventory:Search('count', {'meat', 'skin'}, {grade=\"1\"})\n\nif inventory then\nfor name, count in pairs(inventory) do\nprint('You have '..count..' '..name)\nend\nend\n\n\nSlots\n\n\nlocal water = exports.ox_inventory:Search('slots', 'water')\nlocal count = 0\nfor _, v in pairs(water) do\nprint(v.slot..' contains '..v.count..' water '..json.encode(v.metadata))\ncount = count + v.count\nend\nprint('You have '..count..' water')\n\n\n\nlocal items = exports.ox_inventory:Search('slots', {'meat', 'skin'}, 'deer')\n\nif items then\nfor name, data in pairs(items) do\nlocal count = 0\nfor _, v in pairs(data) do\nif v.slot then\nprint(v.slot..' contains '..v.count..' '..name..' '..json.encode(v.metadata))\ncount = count + v.count\nend\nend\nprint('You have '..count..' '..name)\nend\nend","getitemcount#GetItemCount":"Get the total item count for all items in the player's inventory with the given name and metadata.\nexports.ox_inventory:GetItemCount(itemName, metadata, strict)\n\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: number","getplayeritems#GetPlayerItems":"Get all items in the player's inventory.\nexports.ox_inventory:GetPlayerItems()\nReturns: table","getplayerweight#GetPlayerWeight":"Get the total weight of all items in the player's inventory.\nexports.ox_inventory:GetPlayerWeight()\nReturns: number","getplayermaxweight#GetPlayerMaxWeight":"Get the maximum carry weight of the player's inventory.\nexports.ox_inventory:GetPlayerMaxWeight()\nReturns: number","getslotidwithitem#GetSlotIdWithItem":"Get a slot id in the player's inventory matching the given name and metadata.\nexports.ox_inventory:GetSlotIdWithItem(itemName, metadata, strict)\n\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: number?","getslotsidwithitem#GetSlotsIdWithItem":"Get all slot ids in the player's inventory matching the given name and metadata.\nexports.ox_inventory:GetSlotIdsWithItem(itemName, metadata, strict)\n\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: number[]?","getslotwithitem#GetSlotWithItem":"Get data for a slot in the player's inventory matching the given name and metadata.\nexports.ox_inventory:GetSlotWithItem(itemName, metadata, strict)\n\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: table?","getslotswithitem#GetSlotsWithItem":"Get data all slots in the player's inventory matching the given name and metadata.\nexports.ox_inventory:GetSlotsWithItem(itemName, metadata, strict)\n\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: table[]?","statebags#Statebags":"","invbusy#invBusy":"Returns whether the player's inventory is currently running an action (i.e. using an item).\nCan be set to true to disable opening the inventory.\ninvBusy: boolean\n\n\nlocal invBusy = LocalPlayer.state.invBusy\n\nif invBusy then\n-- Do stuff when busy\nelse\n-- Do stuff when not busy\nend\nDisable opening inventory\nLocalPlayer.state.invBusy = true","invhotkeys#invHotkeys":"Allows you to enable/disable a player's access to inventory hotkeys.\ninvHotkeys: boolean\n\n\nLocalPlayer.state.invHotkeys = false\n\nLocalPlayer.state.invHotkeys = true","invopen#invOpen":"Returns whether the player's inventory is currently open or not.\ninvOpen: boolean\n\n\nlocal invOpen = LocalPlayer.state.invOpen\n\nif invOpen then\n-- Do stuff when open\nelse\n-- Do stuff when closed\nend"}},"/ox_inventory/Functions/Server":{"title":"Server","data":{"":"","setplayerinventory#setPlayerInventory":"Creates and sets the player's inventory.\nexports.ox_inventory:setPlayerInventory(player, data)\n\nplayer: table\nsource: number\nidentifier: string\nname: string\ngroups?: table\nsex?: string\ndateofbirth?: string\n\n\ndata?: table\nIf not provided will load player's inventory data from the db.","forceopeninventory#forceOpenInventory":"Opens an inventory using the passed data.\nForces a player to open an inventory, without usual security checks (groups, coords).\nexports.ox_inventory:forceOpenInventory(playerId, invType, data)\n\nplayerId: number\ninvType: string\n'player'\n'stash'\n'container'\n'drop'\n'glovebox'\n'trunk'\n'dumpster'\n\n\ndata: number or string or table\n\n\n\nOpen the target player's inventory.\nexports.ox_inventory:forceOpenInventory(1, 'player', 3)\nAdmin command to open a player's inventory.\nRegisterCommand('openplayerinv', function(source, args)\nexports.ox_inventory:forceOpenInventory(source, 'player', tonumber(args[1]))\nend, true)\n\n\nOpen the first stash in data/stashes.\nexports.ox_inventory:forceOpenInventory(1, 'stash', 'apartment420')\nOpen a custom stash (created on the server with RegisterStash).\nexports.ox_inventory:forceOpenInventory(1, 'stash', 'society_police')\nOpen a stash with a specific owner.\nexports.ox_inventory:forceOpenInventory(1, 'stash', { id = 'police_locker', owner = 'license:xxxxxxxx' })","updatevehicle#UpdateVehicle":"Update the internal reference to vehicle stashes, without triggering a save or updating the database.\nexports.ox_inventory:UpdateVehicle(oldPlate, newPlate)\n\noldPlate: string\nnewPlate: string","items#Items":"Returns a table of all registered items. The format is as defined in data/items.lua.\nexports.ox_inventory:Items()\nThe following snippet can be used in crafting resources such as okokCrafting or core_crafting, rather than querying the database.\nlocal itemNames\nESX.RegisterServerCallback('crafting:itemNames', function(source, cb)\nif not itemNames then\nitemNames = {}\nfor item, data in pairs(exports.ox_inventory:Items()) do\nitemNames[item] = data.label\nend\nend\ncb(itemNames)\nend)","additem#AddItem":"Adds an item into the specified inventory.Should be used alongside CanCarryItem otherwise, the maximum weight may be exceeded.\nexports.ox_inventory:AddItem(inv, item, count, metadata, slot, cb)\n\ninv: table or string or number\nThe inventory's unique id, or a table with the id and owner.\nplayerId: 1\ninventoryId: gloveVGH283\n{ id = 'personallocker', owner = 'license:xxxxxx'}\n\n\n\n\nitem: string\nThe name of the item to add to the target.\n\n\ncount: number\nThe number of items to add.\n\n\nmetadata?: table or string\nA table of unique data to attach to the item object. A string will create a table with the \"type\" field.\n\n\nslot?: number\nA specific slot to add the item to. If the slot is invalid, the first available slot will be used instead.\n\n\ncb?: function(success: boolean, response?: string)\n\nIf used for glovebox, trunk or stash you must first check the inventory is loaded with GetInventoryReturns success, response if cb is undefined, otherwise they are used in the callback only.Example:\nlocal success, response = exports.ox_inventory:AddItem('gloveVGH283', 'bread', 4)\n\nif not success then\n-- if no slots are available, the value will be \"inventory_full\"\nreturn print(response)\nend\n\nprint(json.encode(response, {indent=true}))\n--[[\n{\n\"metadata\": [],\n\"label\": \"Bread\",\n\"slot\": 1,\n\"stack\": true,\n\"close\": true,\n\"name\": \"bread\",\n\"count\": 1,\n\"weight\": 150\n}\n]]\nPossible value of the \"response\" argument, on failure:\n\"invalid_item\": the item doesn't exist\n\"invalid_inventory\": the inventory doesn't exist\n\"inventory_full\": no free slots","removeitem#RemoveItem":"Removes the specified item from the specified inventory.\nexports.ox_inventory:RemoveItem(inv, item, count, metadata, slot)\n\ninv: table or string or number\nThe inventory's unique id, or a table with the id and owner.\nplayerId: 1\ninventoryId: gloveVGH283\n{ id = 'personallocker', owner = 'license:xxxxxx'}\n\n\n\n\nitem: string\nThe name of the item to remove from the target.\n\n\ncount: number\nThe number of items to remove.\n\n\nmetadata?: table or string\nOnly remove items with matching metadata properties.\n\n\nslot?: number\nA specific slot to remove the item from. If the slot is invalid, the first available slot will be used instead.\n\n\ncb?: function(success: boolean, response?: string)\n\nReturns success: boolean, response: string?.Possible value of \"response\" on failure:\n\"invalid_item\": the item doesn't exist\n\"invalid_inventory\": the inventory doesn't exist\n\"not_enough_items\": inventory did not contain enough of the given item\n\nExample:\n-- Removes 2 water from the glovebox for the given plate.\nlocal success = exports.ox_inventory:RemoveItem('gloveVGH283', 'water', 2)","getitem#GetItem":"Returns generic item data from the specified inventory, with the total count.\nexports.ox_inventory:GetItem(inv, item, metadata, returnsCount)\n\ninv: table or string or number\nitem: table or string\nCan be items array.\n\n\nmetadata?: any\nOnly returns the count of items that strictly match the given metadata.\n\n\nreturnsCount?: boolean\n\nIf returnsCount is set to true, the returned value will be the count based on\nhow many times the item was found.Otherwise returns the data related to the item and its total count found in the inventory.Example:\nlocal item = ox_inventory:GetItem(source, 'water', nil, false)\n\nprint(json.encode(item, {indent=true}))\n--[[\n{\n\"consume\": 1,\n\"count\": 15,\n\"stack\": true,\n\"name\": \"water\",\n\"weight\": 500,\n\"label\": \"Water\",\n\"close\": true\n}\n]]","convertitems#ConvertItems":"Takes traditional item data and updates it to support ox_inventory.\nexports.ox_inventory:ConvertItems(playerId, items)\n\nplayerId: number\nitems: table\n\nData conversion example:\nOld: [{\"cola\":1, \"bread\":3}]\nNew: [{\"slot\":1,\"name\":\"cola\",\"count\":1},\n{\"slot\":2,\"name\":\"bread\",\"count\":3}]","cancarryitem#CanCarryItem":"Returns true or false depending if the inventory can carry the specified item.The function checks for inventory weight and available slots.\nexports.ox_inventory:CanCarryItem(inv, item, count, metadata)\n\ninv: table or string or number\nitem table or string\nCan be array of items.\n\n\ncount: number\nmetadata?: table or string\nIf metadata is passed as string then metadata.type will be checked.\n\n\n\nExample:\n-- Checks if the player calling the event can carry 3 water items\nif exports.ox_inventory:CanCarryItem(source, 'water', 3) then\n-- Do stuff if can carry\nelse\n-- Do stuff if can't carry\nend","cancarryamount#CanCarryAmount":"Returns the amount a player can hold based on available weight.\nexports.ox_inventory:CanCarryAmount(inv, item)\n\ninv: table or string or number\nitem: table or string\nCan be array to check multiple items.\n\n\n\nExample:\n-- Checks how much you can carry\namountToAdd = exports.ox_inventory:CanCarryAmount(inv, 'stone')\n-- Adds the amount\nexports.ox_inventory:AddItem(inv, 'stone', amountToAdd)","cancarryweight#CanCarryWeight":"Returns if inventory can carry specified weight and free inventory weight.\nexports.ox_inventory:CanCarryWeight(inv, weight)\n\ninv: table or string or number\nweight: number\n\nExample:\n-- Checks if player can carry 1000 grams.\nlocal fillAmount = 1000\nlocal canCarryWeight, freeWeight = ox_inventory:CanCarryWeight(playerId, fillAmount)\n\nif freeWeight == 0 then\n-- Player can't carry weight.\nreturn\nelseif not canCarryWeight then\n-- Modify fillAmount, because inventory can't carry specified weight\nfillAmount = freeWeight\nend\n\n-- Do something","setmaxweight#SetMaxWeight":"Sets the maximum weight available for an inventory.\nexports.ox_inventory:SetMaxWeight(inv, maxWeight)\n\ninv: table or string or number\nmaxWeight: number\n\nExample:\nlocal ox_inventory = exports.ox_inventory\n\n-- Set the max weight for player 1's inventory to 20kg.\nox_inventory:SetMaxWeight(1, 20000)","canswapitem#CanSwapItem":"Returns true if the item swap is possible based on inventory weight.\nexports.ox_inventory:CanSwapItem(inv, firstItem, firstItemCount, testItem, testItemCount)\n\ninv: table or string or number\nfirstItem: string\nfirstItemCount: number\ntestItem: string\ntestItemCount: number","getitemcount#GetItemCount":"Get the total item count for all items in an inventory with the given name and metadata.\nexports.ox_inventory:GetItemCount(inv, itemName, metadata, strict)\n\ninv: table or string or number\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: number","getitemslots#GetItemSlots":"Returns the number of slots the specified item is in, the item's total count and the remaining empty slots.\nexports.ox_inventory:GetItemSlots(inv, item, metadata)\n\ninv: table or string or number\nitem: table or string\nmetadata?: table","getslot#GetSlot":"Returns the specified slot data as a table.\n\nexports.ox_inventory:GetSlot(inv, slot)\n\ninv: table or string or number\nslot: number\n\nExample:\nlocal slot = exports.ox_inventory:GetSlot(source, 1)\n\nprint(json.encode(slot, {indent=true}))\n--[[\n{\n\"weight\": 2000,\n\"name\": \"water\",\n\"metadata\": [],\n\"slot\": 1,\n\"label\": \"Water\",\n\"close\": true,\n\"stack\": true,\n\"count: 4\n}\n]]","getslotforitem#GetSlotForItem":"Get the slot id of an existing item matching the given data, or an empty slot.\nexports.ox_inventory:GetSlotForItem(inv, itemName, metadata)\n\ninv: table or string or number\nitemName: string\nmetadata: table?\n\nReturns: number?","getslotidwithitem#GetSlotIdWithItem":"Get a slot id in an inventory matching the given name and metadata.\nexports.ox_inventory:GetSlotIdWithItem(inv, itemName, metadata, strict)\n\ninv: table or string or number\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: number?","getslotidswithitem#GetSlotIdsWithItem":"Get all slot ids in an inventory matching the given name and metadata.\nexports.ox_inventory:GetSlotIdsWithItem(inv, itemName, metadata, strict)\n\ninv: table or string or number\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: number[]?","getslotwithitem#GetSlotWithItem":"Get data for a slot in an inventory matching the given name and metadata.\nexports.ox_inventory:GetSlotWithItem(inv, itemName, metadata, strict)\n\ninv: table or string or number\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: table?","getslotswithitem#GetSlotsWithItem":"Get data all slots in an inventory matching the given name and metadata.\nexports.ox_inventory:GetSlotsWithItem(inv, itemName, metadata, strict)\n\ninv: table or string or number\nitemName: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata properties, otherwise use partial matching.\n\n\n\nReturns: table[]?","getemptyslot#GetEmptySlot":"Get the first available empty slot in an inventory.\nexports.ox_inventory:GetEmptySlot(inv)\n\ninv: table or string or number\n\nReturns: number?","getcontainerfromslot#GetContainerFromSlot":"Returns the inventory associated with the container linked in the slot of the given inventory.\nexports.ox_inventory:GetContainerFromSlot(inv, slotId)\n\ninv: table or string or number\nslotId: number\n\nReturns: table?","setslotcount#SetSlotCount":"Sets the number of slots available for an inventory.\nexports.ox_inventory:SetSlotCount(inv, slots)\n\ninv: table or string or number\nslots: number\n\nExample:\nlocal ox_inventory = exports.ox_inventory\n\n-- Set the slot count for player 1's inventory to 10.\nox_inventory:SetSlotCount(1, 10)","getinventory#GetInventory":"Returns the inventory associated with the ID (and owner if defined). Otherwise returns null.\nexports.ox_inventory:GetInventory(inv, owner)\n\ninv: number or table\nowner?: string or boolean\n\nExample:\nlocal inventory = exports.ox_inventory:GetInventory('example_stash', false)\nprint(json.encode(inventory, {indent = true}))\n--[[\n{\n\"id\": \"example_stash,\n\"label\": \"Police Stash\",\n\"type\": \"stash,\n\"slots\": 50,\n\"weight\": 0,\n\"maxWeight\": 100000,\n\"owner\": false,\n...\n}\n]]","getinventoryitems#GetInventoryItems":"Returns all slots with items in a inventory.\nexports.ox_inventory:GetInventoryItems(inv, owner)\n\ninv: number or table\nowner?: string or boolean\n\nExample:\nlocal playerItems = exports.ox_inventory:GetInventoryItems(source)","confiscateinventory#ConfiscateInventory":"Clears a player's inventory and saves it to a stash.Use ReturnInventory to return the confiscated inventory back to\nthe player.\nexports.ox_inventory:ConfiscateInventory(source)\n\nsource: number","returninventory#ReturnInventory":"Returns the confiscated inventory back to the player.Use it alongside ConfiscateInventory.\nexports.ox_inventory:ReturnInventory(source)\n\nsource: number","clearinventory#ClearInventory":"Clears the specified inventory. The keep argument is either a string or an array of strings containing the name(s) of the item(s) to keep in the inventory after clearing.\nexports.ox_inventory:ClearInventory(inv, keep)\n\ninv: table or string or number\nkeep?: string or string[]","search#Search":"Searches an inventory for a specified item.\nexports.ox_inventory:Search(inv, search, item, metadata)\n\ninv: table or string or number\nsearch: string\nitem: table or string\nmetadata?: table or string\n\nsearch can be either 'slots' or 'count', where slots will return a table of data\nand count will return the found amount of the specified item.","swapslots#SwapSlots":"Swaps slots in specified inventories.\nexports.ox_inventory:SwapSlots(fromInventory, toInventory, slot1, slot2)\n\nfromInventory: table or string or number\ntoInventory: table or string or number\nslot1: number\nslot2: number","registerstash#RegisterStash":"Creates a new custom stash.\nexports.ox_inventory:RegisterStash(id, label, slots, maxWeight, owner, groups, coords)\n\nid: string or number\nStash identifier when loading from the database.\n\n\nlabel: string\nDisplay name when inventory is open.\n\n\nslots: number\nmaxWeight: number\nowner: string or boolean or nil\nstring: Can only access the stash linked to the owner.\ntrue: Each player has a unique stash but can request other player's stashes.\nnil: Always shared.\n\n\ngroups: table\nTable of player groups (jobs) able to access the stash.\nTable of group names where the numeric value is the minimum grade required.\n{['police'] = 0, ['ambulance'] = 2}\n\n\ncoords?: vector3 or vector3[]\n\n\nThis function needs to be triggered before a player can open the stash.\nExample:For a use case example on this function check out the written Guide for it.","createtemporarystash#CreateTemporaryStash":"Creates a temporary stash which will be removed after some time.\nexports.ox_inventory:CreateTemporaryStash(properties)\n\nproperties: table\nlabel: string\nslots: number\nmaxWeight: number\nowner?: string number or boolean\nstring: Can only access the stash linked to the owner.\ntrue: Each player has a unique stash but can request other player's stashes.\nThe inventory is always shared if false or nil.\n\n\ngroups?: table<string, number>\nTable of group names (e.g. jobs) where the numeric value is the minimum grade required.\n{['police'] = 0, ['ambulance'] = 2}\n\n\ncoords?: vector3\nStash can only be accessed while nearby.\n\n\nitems?: { [number]: string, [number]: number, [number]?: table }[]\nAn array of tables, containing a sequence of itemName, count, metadata.\n\n\n\n\n\nReturn:\ninventoryId: string\n\nExample\nlocal mystash = exports.ox_inventory:CreateTemporaryStash({\nlabel = 'mystash',\nslots = 5,\nmaxWeight = 5000,\nitems = {\n{ 'WEAPON_MINISMG', 1 },\n{ 'ammo-9', 69 },\n{ 'water', 2, { label = 'Mineral water' } }\n}\n})\n\nTriggerClientEvent('ox_inventory:openInventory', 1, 'stash', mystash)","customdrop#CustomDrop":"Drops can be created from other resources, containing a variety of items and utilising a custom label (instead of 'Drop 32648').\nexports.ox_inventory:CustomDrop(prefix, items, coords, slots, maxWeight, instance, model)\n\nprefix: string\nitems: table\nname: string\ncount: number\nmetadata?: table\n\n\ncoords: vector3\nslots?: number\nmaxWeight?: number\ninstance?: string or number\nmodel?: number\n\n\n-- Create a generic drop with a marker\nexports.ox_inventory:CustomDrop('Carcass', {\n{'meat', 5, { grade = 2, type = 'deer' }},\n{'hide', 5, { grade = 2, type = 'deer' }}\n}, coords)\n\n-- Create a drop with an entity\nexports.ox_inventory:CustomDrop('SMG', {\n{ 'WEAPON_MINISMG', 1 },\n{ 'ammo-9', 69 },\n}, GetEntityCoords(GetPlayerPed(1)), 5, 10000, nil, `w_sb_minismg`)","createdropfromplayer#CreateDropFromPlayer":"Creates a new drop with the contents of a player's inventory.\nexports.ox_inventory:CreateDropFromPlayer(playerId)\n\nplayerId: number\n\nReturn:\ndropId: string\n\nExample\nlocal dropId = exports.ox_inventory:CreateDropFromPlayer(1)","getcurrentweapon#GetCurrentWeapon":"Returns the player's currently equipped weapon as a table.\n-- inv: string or number\nexports.ox_inventory:GetCurrentWeapon(inv)\n\ninv: table or string or number","setdurability#SetDurability":"Sets durability onto the specified slot.Can be used for repairing weapons.\nexports.ox_inventory:SetDurability(inv, slot, durability)\n\ninv: table or string or number\nslot: number\ndurability: number\n\nExample:\nlocal ox_inventory = exports.ox_inventory\n\n-- Set the durability of the item in slot 3 of source player's inventory to 100\nox_inventory:SetDurability(source, 3, 100)\n\n-- Set the durability of the source player's current weapon to 100\nlocal weapon = ox_inventory:GetCurrentWeapon(source)\n\nif weapon then\nox_inventory:SetDurability(source, weapon.slot, 100)\nend","setmetadata#SetMetadata":"Sets metadata on the specified slot.\nox_inventory:SetMetadata(inv, slot, metadata)\n\ninv: table or string or number\nslot: number\nmetadata: table\n\nExample:\nlocal ox_inventory = exports.ox_inventory\n\nlocal water = ox_inventory:Search(source, 1, 'water')\nfor k, v in pairs(water) do\nprint('\\n______________'..'\\n- index '..k)\nprint(v.name, 'slot: '..v.slot, 'metadata: '..json.encode(v.metadata))\nwater = v\nbreak\nend\n\nwater.metadata.type = 'clean'\nox_inventory:SetMetadata(source, water.slot, water.metadata)\nprint(('modified %sx water in slot %s with new metadata'):format(water.count, water.slot))"}},"/ox_inventory/Functions/Server/Hooks":{"title":"Event Hooks","data":{"":"Event hooks allow 3rd party resources to define new behaviour without modifying the inventory code directly.","registerhook#registerHook":"exports.ox_inventory:registerHook(eventName, function(payload) end, options)\n\neventName: string\npayload: table\noptions?: table\nprint?: boolean\nPrint to the console when triggering the event.\n\n\nitemFilter?: { [string]: true }\nThe event will only trigger for items defined as keys in a set.\n\n\ninventoryFilter?: string[]\nThe event will only trigger for inventories that match one of the patterns in the array.\n\n\ntypeFilter?: { [string]: true }\nThe event will only trigger for inventories with one of the provided types (e.g. 'player', 'stash')\n\n\n\n\n\nReturn:\nhookId: number","swapitems#swapItems":"Triggered when moving any item from one slot to another, or when \"giving\" an item.\nBy returning false, you can cancel the action and revert the inventory state.Payload:\nsource: number\naction: 'move' or 'stack' or 'swap' or 'give'\nfromInventory: table or string or number\ntoInventory: table or string or number\nfromType: string\ntoType: string\nfromSlot: table\ntoSlot?: table or number\ncount: number\n\nExample:\nlocal hookId = exports.ox_inventory:registerHook('swapItems', function(payload)\nprint(json.encode(payload, { indent = true }))\nreturn false\nend, {\nprint = true,\nitemFilter = {\nwater = true,\n},\ninventoryFilter = {\n'^glove[%w]+',\n'^trunk[%w]+',\n}\n})\nBlacklists \"water\" from being moved into or from gloveboxes and trunks.","openinventory#openInventory":"Payload:\nsource: number\ninventoryId: number or string\ninventoryType: string\n\nTriggered when a player tries to open a secondary inventory.\nBy returning false, you can cancel the action and keep the player's inventory closed.Example:\nlocal hookId = exports.ox_inventory:registerHook('openInventory', function(payload)\nprint(json.encode(payload, { indent = true }))\nreturn false\nend, {\nprint = true,\ninventoryFilter = {\n'^glove[%w]+',\n'^trunk[%w]+',\n}\n})\nDisables gloveboxes and trunks.","createitem#createItem":"Payload:\ninventoryId?: number or string\nmetadata: table\nitem: table\ncount: number\n\nTriggered when an item is created, either by buying it, using AddItem, or when converting inventory data.\nBy returning a table you can modify or replace the metadata given to an item.Example:\nlocal hookId = exports.ox_inventory:registerHook('createItem', function(payload)\nprint(json.encode(payload, { indent = true }))\nlocal metadata = payload.metadata\nmetadata.label = 'Mineral Water'\nreturn metadata\nend, {\nprint = true,\nitemFilter = {\nwater = true\n}\n})\nSets the label for \"water\" to \"Mineral Water\".","buyitem#buyItem":"Payload:\nsource: number\nshopType: string\nshopId: number\ntoInventory: number\ntoSlot: number\nitemName: string\nmetadata: table\ncount: number\nprice: number\ntotalPrice: number\ncurrency?: string\n\nTriggered when an item is about to be purchased and can return false to prevent the transaction.Example:\nlocal hookId = exports.ox_inventory:registerHook('buyItem', function(payload)\nprint(json.encode(payload, { indent = true, sort_keys = true }))\nreturn false\nend, {\nprint = true,\nitemFilter = {\nwater = true\n},\n})\n\nPrevents players from purchasing items at General stores.","craftitem#craftItem":"Payload:\nsource: number\nbenchId: number\nbenchIndex: number\nrecipe: table\ncount: number\nduration: number\ningredients: table<string, number>\nname: string\nslot: number\nweight: number\n\n\ntoInventory: number\ntoSlot: number\n\nExample:\nlocal hookId = exports.ox_inventory:registerHook('craftItem', function(payload)\nprint(json.encode(payload, { indent = true, sort_keys = true }))\nreturn false\nend, {\nprint = true,\nitemFilter = {\nlockpick = true\n},\n})\n\nPrevent lockpicks from being crafted by players.","removehooks#removeHooks":"exports.ox_inventory:removeHooks(id)\n\nid?: number\n\nRemoves a hook created by the invoking resource with the the specified id.\nIf no id is specified then all hooks registered by the resource are removed."}},"/ox_inventory/Guides/crafting":{"title":"Crafting","data":{"":"Crafting locations, items and their ingredients are defined in data/crafting.lua.","crafting-definition#Crafting definition":"{\nitems = {\n{\nname = 'lockpick',\ningredients = {\ngarbage = 3,\nWEAPON_HAMMER = 0.1\n},\nduration = 5000,\ncount = 3,\nmetadata = { durability = 20 }\n},\n{\nname = 'garbage',\ningredients = {\ncola = 1\n},\nmetadata = { description = 'An empty soda can.', weight = 20, image = 'trash_can' }\n},\n},\npoints = {\nvec3(-1147.083008, -2002.662109, 13.180260),\n},\nzones = {\n{\ncoords = vec3(-1146.2, -2002.05, 13.2),\nsize = vec3(3.8, 1.05, 0.15),\ndistance = 1.5,\nrotation = 315.0,\n},\n},\nblip = { id = 566, colour = 31, scale = 0.8 },\n},\n\nitems: table\nname: string\ningredients: table\nItem ingredients can be seen in the item tooltip.\nKey-value pairs of item name and consume count\nkey - Item name.\nvalue - If 1 or above it's the consume count, if below 1 and above 0 it's the durability consume amount, if\nset to 0 then the item is required but not consumed.\n\n\n\n\nduration: number\nCrafting duration in milliseconds.\n\n\ncount: number\nItem amount received upon crafting.\n\n\nmetadata: table\nMetadata applied to the item being crafted.\n\n\n\n\npoints: vector3[]\nInteraction locations that will open the crafting inventory.\n\n\ngroups: table\nKey-value pairs of job name and minimum grade to access the crafting location.\n{[\"police\"] = 0, [\"ambulance\"] = 2}\n\n\nzones: table\nox_lib targeting zones used for ox_target.\ncoords: vector3\nsize: vector3\ndistance: number\nrotation: number\n\n\nblip: table\nid: number\nBlip sprite number.\n\n\ncolour: number\nscale: number"}},"/ox_inventory/Guides/creatingItems":{"title":"Creating items","data":{"":"","defining-item-data#Defining item data":"Before being able to see or use an item in game it must first be defined.All of the items are defined in the /data/items.lua file with key, value pairs.\nKey is the name (not the label) of an item and the value is a table containing the\noptions for the item.Item options:\nlabel: string\nweight?: number\nstack?: boolean\nIf set to false will not allow the item to be stacked.\n\n\ndegrade?: number\nAmount of time in minutes the item will degrade after.\n\n\ndecay?: boolean\nIf true the item will be deleted when durability reaches 0 (not instant for degraded items).\n\n\nclose?: boolean\nIf set to false does not close the inventory on item use.\n\n\ndescription?: string\nItem description that will be shown in the tooltip\n\n\nconsume?: number\nItem count needed and removed use.\nDefault: 1\nIf set to a decimal will consume durability instead (0.2 = 20%).\n\n\nallowArmed?: boolean\nIf set to true will allow use of item while armed with a weapon.\n\n\nserver?: table\nexport?: string\n\n\nclient?: table\nexport?: string\nExport to be triggered after item use.\n\n\nevent?: string\nEvent to be triggered after item use.\n\n\nstatus?: table\nAdjust esx_status values after use.\n\n\nanim?: table\nAnimation that will be played during the progress bar.\ndict: string\nclip: string\n\n\nprop?: table\nAttached prop that will be displayed during the progress bar.\nmodel: string or hash\npos: table (x, y, z)\nrot: table (x, y, z)\n\n\ndisable?: table\nActions to be disabled during the progress bar\nmove?: boolean\ncar?: boolean\ncombat?: boolean\nmouse?: boolean\n\n\nusetime?: number\ncancel?: boolean\nIf set to true the player canc cancel item use.\n\n\nadd?: function(total: number)\nFunction that triggers when receiving an item\nReturns total item count as total\n\n\nremove?: function(total: number)\nFunction that triggers when removing an item\nReturns total item count as total\n\n\n\n\nbuttons?: table\nlabel: string\naction: function(slot: number)\nCallback function when button is clicked in context menu, returns item slot.\n\n\n\n\n\nExamples:\n\n\n['burger'] = {\nlabel = 'Burger',\nweight = 220,\nstack = true,\nclose = true,\nclient = {\nstatus = { hunger = 200000 },\nanim = { dict = 'mp_player_inteat@burger', clip = 'mp_player_int_eat_burger_fp' },\nprop = {\nmodel = 'prop_cs_burger_01',\npos = { x = 0.02, y = 0.02, y = -0.02},\nrot = { x = 0.0, y = 0.0, y = 0.0}\n},\nusetime = 2500,\n}\n}\n\n\nA modified burger item which includes a description.\n['burger'] = {\nlabel = 'Burger',\ndescription = 'Just what is the secret formula?'\nweight = 220,\nstack = true,\nclose = true,\nclient = {\nstatus = { hunger = 200000 },\nanim = { dict = 'mp_player_inteat@burger', clip = 'mp_player_int_eat_burger_fp' },\nprop = {\nmodel = 'prop_cs_burger_01',\npos = { x = 0.02, y = 0.02, y = -0.02},\nrot = { x = 0.0, y = 0.0, y = 0.0}\n},\nusetime = 2500,\n}\n}\n\n\nA modified burger item, which gives you notifications on add and remove arguments.\n['burger'] = {\nlabel = 'Burger',\nweight = 220,\nstack = true,\nconsume = 0,\nclient = {\nadd = function(total)\nif total > 0 then\nlib.notify({description = 'Nice burger you got there!'})\nend\nend,\n\nremove = function(total)\nif total < 1 then\nlib.notify({description = 'You lost all of your burgers!'})\nend\nend\n}\n}","making-the-item-usable#Making the item usable":"If you are using ESX, you can continue using ESX.RegisterUsableItem.\nIf you are using QBCore, you can continue using QBCore.Functions.CreateUseableItem.\n\nUsing the built-in system is more secure and provides much more functionality.","client-callbacks#Client callbacks":"Item callbacks can be added by defining an export (recommended), or by adding it to items/client.lua.When defining item data, adding client.export will trigger an event on item use.\nThe correct formatting is export = resourceName.exportName.\nexports('bandage', function(data, slot)\nlocal playerPed = PlayerPedId()\nlocal maxHealth = GetEntityMaxHealth(playerPed)\nlocal health = GetEntityHealth(playerPed)\n\n-- Does the ped need to heal? We can cancel the item from being used.\nif health < maxHealth then\n-- Triggers internal-code to correctly use items.\n-- This adds security, removes the item on use, adds progressbar support, and is necessary for server callbacks.\nexports.ox_inventory:useItem(data, function(data)\n-- The server has verified the item can be used.\nif data then\nSetEntityHealth(playerPed, math.min(maxHealth, math.floor(health + maxHealth / 16)))\nlib.notify({description = 'You feel better already'})\nend\nend)\nelse\n-- Don't use the item\nlib.notify({type = 'error', description = 'You don\\'t need a bandage right now'})\nend\nend)","server-callbacks#Server callbacks":"A callback function can be defined on the server to handle several events (usingItem, usedItem, buyItem).\nThis can either be an export (recommended), or added to the bottom of items/server.lua.\nWhen defining item data, adding server.export will trigger an event for the actions above.\nThe correct formatting is export = resourceName.exportName.\nexports('bandage', function(event, item, inventory, slot, data)\n-- Player is attempting to use the item.\nif event == 'usingItem' then\nlocal playerPed = GetPlayerPed(inventory.id)\nlocal maxHealth = GetEntityMaxHealth(playerPed)\nlocal health = GetEntityHealth(playerPed)\n\n-- Check if the player needs to be healed.\nif health >= maxHealth then\nTriggerClientEvent('ox_lib:notify', inventory.id, {type = 'error', description = 'You don\\'t need a bandage right now'})\n\n-- Returning 'false' will prevent the item from being used\nreturn false\nend\n\nreturn\nend\n\n-- Player has finished using the item.\nif event == 'usedItem' then\nreturn TriggerClientEvent('ox_lib:notify', inventory.id, {description = 'You feel better already'})\nend\n\n-- Player is attempting to purchase the item.\nif event == 'buying' then\nreturn TriggerClientEvent('ox_lib:notify', inventory.id, {type = 'success', description = 'You bought a bandage'})\nend\nend)","creating-container-items#Creating container items":"Like with other items the item must first be registered.Example:\n['paperbag'] = {\nlabel = 'Paper Bag',\nweight = 1,\nstack = false,\nclose = false,\nconsume = 0\n},\nWhen registered you can define the item as a container in /modules/items/containers.lua\nThe key for the container is the name you gave it when registering the item.\nYou can also define the number of slots, the maximum weight, blacklist and whitelist items.\nitemName:\nslots: number\nThe number represents the amount of slots\nmaxWeight: number\nThe number represents the maximum weight within the container\nblacklist:\nSupports single and multiple items\n{ 'testburger', 'testburger2' }\n\n\nwhitelist:\nSupports single and multiple items\n{ 'testburger', 'testburger2' }\n\n\n\n\n\nExample:\nsetContainerProperties('paperbag', {\nslots = 5,\nmaxWeight = 1000,\nblacklist = { 'testburger' }\n})"}},"/ox_inventory/Guides/metadata":{"title":"Metadata","data":{"":"Item metadata is a very powerful tool that can be used to create multiple different items out of a single item.In this guide we'll use pokemon cards as an example, but you can find an already integrated example in the inventory\nwith the garbage item.","creating-the-base-item#Creating the base item":"First of all we need to create a base item that we'll use to apply metadata to.\n['pokemon_card'] = {\nlabel = 'Pokemon card',\nweight = 10,\nconsume = 0,\nserver = {\nexport = 'pokemon.pokemon_card'\n}\n}\nIn this case we define the label and the weight as well since we are going to have all the cards weigh the same, but if you\ndo not want them all to weigh the same you can leave it out and apply weight through metadata.We'll also make the item usable by calling the pokemon_card export in the pokemon resource.\nexports('pokemon_card', function(event, item, inventory, slot, data)\nif event == 'usingItem' then\nlocal itemSlot = exports.ox_inventory:GetSlot(inventory.id, slot)\nprint(json.encode(itemSlot.metadata, {indent=true}))\nend\nend)","special-metadata-properties#Special metadata properties":"You can define any metadata property with any value you want it to have, but there are a couple metadata properties that\nhave special use cases.These properties are:\nlabel: string\nDisplay name of the item\n\n\nweight: number\nAmount the item will weigh\n\n\ndescription: string\nDescription of the item that will be displayed in the tooltip\n\n\nimage: string\nImage inside the image path that the item will use\n\n\nimageurl: string\nUrl to the image that the item will use\n\n\ntype: any\nItem type that is displayed in top right of the tooltip\n\n\n\nWe'll use these properties to create our pokemon cards out of the pokemon_card item that we created earlier.","creating-metadata-items#Creating metadata items":"We can easily create metadata items by defining a hook using createItem and adding it to a shop as well.\ninventory = {\n{name = 'pokemon_card', price = 300, metadata = {\nlabel = 'Charizard',\ndescription = 'It is said that Charizard’s fire burns hotter if it has experienced harsh battles.',\nimage = 'panties',\ntype = 'Fire',\nhp = 78,\nattack = 84,\ndefense = 78\n}}\n}\n\nlocal pokemonMetadata = {\ncharizard = {\nlabel = 'Charizard',\ndescription = 'It is said that Charizard’s fire burns hotter if it has experienced harsh battles.',\nimage = 'panties',\ntype = 'Fire',\nhp = 78,\nattack = 84,\ndefense = 78\n}\n}\n\nlocal hookId = exports.ox_inventory:registerHook('createItem', function(payload)\nlocal pokemon = pokemonMetadata[payload.metadata.type]\nif not pokemon then return end\nreturn pokemon\nend, {\nitemFilter = {\npokemon_card = true\n}\n})\nAs seen above when our item is usable, the metadata properties are all there and accessible through the slot.","displaying-custom-metadata-properties#Displaying custom metadata properties":"We can display our custom metadata we set on our charizard card by either using string concatenation and adding them to\nthe description or by using the displayMetadata client function.\nexports.ox_inventory:displayMetadata({\nhp = 'HP',\nattack = 'ATK',\ndefense = 'DEF'\n})"}},"/ox_inventory/Guides/stashes":{"title":"Custom stashes","data":{"":"We can set up custom stashes from outside the resource utilising the exported RegisterStash function.Firstly, we need to define the stashes properties.","stash-properties#Stash properties":"id: string\nUnique name to identify the stash in the database.\n\n\nlabel: string\nDisplay name when viewing the stash.\n\n\nslots: number\nNumber of slots the stash will have.\n\n\nweight: number\nMaximum weight of the stash inventory.\n\n\nowner?: string or boolean\ntrue: Each player has their own unique stash, but can request to open the stash of another player\nfalse: Only a single stash exists and is shared between all players\nstring: The stash explicitly belongs to the given owner, usually a player identifier\n\n\ngroups?: table\nKey-value pairs of job name and minimum grade to be able to access the stash. ({[\"police\"] = 0, [\"ambulance\"] = 2})\nname: string\ngrade: number\n\n\ncoords?: vector3 or table\nYou can set the stash coordinates to prevent the stash from being opened if the player isn't close enough.\nVector or table containing the coordinates of the stash.","example#Example":"Below the value is hardset, but it could be loaded from the database (especially if there are unknown fields, i.e. owner)\n-- Server\nlocal stash = {\nid = '42wallabyway',\nlabel = '42 Wallaby Way',\nslots = 50,\nweight = 100000,\nowner = 'char1:license'\n}\n\nAddEventHandler('onServerResourceStart', function(resourceName)\nif resourceName == 'ox_inventory' or resourceName == GetCurrentResourceName() then\nexports.ox_inventory:RegisterStash(stash.id, stash.label, stash.slots, stash.weight, stash.owner)\nend\nend)\n\n-- Client\nexports.ox_inventory:openInventory('stash', {id='42wallabyway', owner=property.owner})\nThe following sample is based on esx_property's db data.\n-- Server\nlocal properties\n\nMySQL.query('SELECT * FROM `properties`', {}, function(result)\nproperties = result\nend\n\nRegisterNetEvent('ox:loadStashes', function(id)\nlocal stash = properties[id]\nif stash then\n-- id: 1, name: WhispymoundDrive, label: 2677 Whispymound Drive, coords: {\"x\":118.748,\"y\":566.573,\"z\":175.697}\nox_inventory:RegisterStash(stash.name, stash.label, 50, 100000, true, false, json.encode(stash.room_menu))\nend\nend)\n\n-- Client\nlocal ox_inventory = exports.ox_inventory\n\nif ox_inventory:openInventory('stash', property.id) == false then\nTriggerServerEvent('ox:loadStashes')\nox_inventory:openInventory('stash', property.id)\nend","example-resource#Example resource":"We put together an example resource showcasing how to properly utilise the stash API:"}},"/ox_inventory/issues":{"title":"Common issues","data":{"":"","ui-has-not-been-built#UI has not been built":"Because the UI for inventory is written in React it can't run natively under FiveM so it must first be bundled into html/css/js.We provide an easy way for you to do this by downloading a pre-bundled release, which you can get from here.\nMake sure you download the ox_inventory.zip file as that one contains the bundled files and others are raw source code.If in case you wanted to edit the inventory UI you would have to build these files yourself.\nTo do so please read our Installation guide.","no-such-export--in-resource-ox_inventory#No such export * in resource ox_inventory":"There are several likely causes for this \"issue\".\nAn error occurred while starting ox_inventory or one of its dependencies (e.g. ox_lib).\nThe resource trying to use the export (e.g. esx_addoninventory) is being started before ox_inventory.\nYou're literally trying to call an export that does not exist, which is a you issue.","stashes--trunks-are-not-saved-at-server-restart#Stashes / trunks are not saved at server restart":"Stopping a server or \"restarting\" it does not trigger any events or allow for saving.\nInventories are saved at a 5 minute interval.\ntxAdmin scheduled restarts and shutdowns will trigger a save.\nThe saveinv command can be used manually or triggered in the console.\nAll inventories are saved when the number of online players hits 0."}},"/ox_lib":{"title":"Ox Lib","data":{"":"A standalone library for providing easily reusable code as importable modules and exports.","installation#Installation":"We strongly recommend referring to Guides for setting up Git, Node.js, and pnpm.","download-a-release-or-build-the-source-code#Download a release or build the source code.":"git clone https://github.com/overextended/ox_lib.git\ncd ox_lib/web\npnpm i\npnpm build","config#Config":"Resource configuration is handled using convars.\n# https://mantine.dev/theming/colors/#default-colors\nsetr ox:primaryColor blue\nsetr ox:primaryShade 8\nYou'll also need to grant ace permissions to the resource.\nadd_ace resource.ox_lib command.add_ace allow\nadd_ace resource.ox_lib command.remove_ace allow\nadd_ace resource.ox_lib command.add_principal allow\nadd_ace resource.ox_lib command.remove_principal allow","usage#Usage":"To enable the library inside of your resource just add @ox_lib/init.lua to shared_scripts or\na shared_script in your fxmanifest.lua file.\nshared_scripts {\n'@ox_lib/init.lua'\n}\nOr if the library is the only shared script you use you can do:\nshared_script '@ox_lib/init.lua'\n\n\n\nNpm package for the lib does not support all the functions that are available for Lua.All supported functions are located inside the resource folder in the lib.\nYou can get the npm package here.Usage:\nYou can either import the whole library object which contains all the functions for that scope (client/server/shared) or you can deconstruct it and import the functions you find needed at the time.\nimport lib from '@overextended/ox_lib/server';\n\nimport { versionCheck } from '@overextended/ox_lib/server';\n\n\nThat's it!\nYou can now use the library functions inside of your resource, check the rest of the documentation to see how to utilise them.","using-icons-for-interface-functions#Using icons for interface functions":"The icon library used is Font Awesome 6.0, if for the icon you define only a string the default icon type will be solid.\nIf you want to use a different icon type, i.e apple as a brand, you need to define icon as a table (array) with the first value being the icon type (fas, far, fab) as a string, and the second being the icon name.\n\n\nicon = {'fab', 'apple'}\n\n\n\nicon: ['fab', 'apple'];","building-the-ui#Building the UI":"If you wish to edit any of the UI elements you will need to download the source code, edit what you need and then compile it.\nDO NOT de-bundle and un-minify the release CSS and JS files to edit them.\nRequirements:\nNode.js (LTS)\npnpm\n\nInstalling Node.js:\nDownload the LTS version of Node.js.\nGo through the install and make sure you install all of the features.\nRun node --version in cmd and make sure that it gives you the version number. If it doesn't then you didn't install it correctly.\n\nInstalling pnpm:\nAfter installing NodeJS you can install pnpm by running npm install -g pnpm.\n\nBuilding the UI:\ncd into the web directory.\nrun pnpm i to install the dependencies.\nrun pnpm build to build the source files.\n\n\nWhen working in the browser you can run pnpm start, which supports hot reloads meaning that\nyou will see your changes after saving your file.If you want to work in game you can run pnpm start:game which writes changes to disk, so\nthe only thing you have to do is restart the resource for it take affect."}},"/ox_lib/Modules/ACL/Server":{"title":"Server","data":{"":"Wrapper around the built-in ACL system. Handles lib.addCommand and ox_groups permissions.\nRefer to Basic Aces & Principals overview/guide for more information.","libaddace#lib.addAce":"Assigns the ace permission to a principal. Third parameter defaults to 'allow', while passing false sets the permission to 'deny'.\n\n\nlib.addAce(principal, ace, allow)\n\nlib.addAce('group.admin', 'command.say')\n\n\n\nimport lib from '@overextended/ox_lib/server'\n\nlib.addAce(principal, ace, allow)\n\nlib.addAce('group.admin', 'command.say')\n\n\n\nprincipal: string\nace: string\nallow: boolean","libremoveace#lib.removeAce":"Removes the ace permission from a principal. Third parameter defaults to 'allow', while passing false sets the permission to 'deny'.\n\n\nlib.removeAce(principal, ace, allow)\n\nlib.removeAce('group.admin', 'command.say')\n\n\n\nimport lib from '@overextended/ox_lib/server'\n\nlib.removeAce(principal, ace, allow)\n\nlib.removeAce('group.admin', 'command.say')\n\n\n\nprincipal: string\nace: string\nallow: boolean","libaddprincipal#lib.addPrincipal":"Assigns a principal to a parent principal. Children inherit permissions from the parent.\n\n\nlib.addPrincipal(child, parent)\n\nlib.addPrincipal('player.1', 'group.moderator')\n\n\n\nimport lib from '@overextended/ox_lib/server'\n\nlib.addPrincipal(child, parent)\n\nlib.addPrincipal('player.1', 'group.moderator')\n\n\n\nchild: string\nparent: string","libremoveprincipal#lib.removePrincipal":"Removes a principal from a parent principal.\n\n\nlib.removePrincipal(child, parent)\n\nlib.removePrincipal('player.1', 'group.moderator')\n\n\n\nimport lib from '@overextended/ox_lib/server'\n\nlib.removePrincipal(child, parent)\n\nlib.removePrincipal('player.1', 'group.moderator')\n\n\n\nchild: string\nparent: string"}},"/ox_lib/Modules/AddCommand/Server":{"title":"Server","data":{"":"Registers commands and simplifies argument validation, permissions, and chat suggestions.\nlib.addCommand(commandName, properties, cb)\n\ncommandName: string or string[]\nproperties: table or false\nhelp?: string\nrestricted?: boolean or string or string[]\nparams?: table[]\nname: string\nhelp?: string\ntype?: 'number' or 'playerId' or 'string'\noptional?: boolean\n\n\n\n\n\n\nlib.addCommand('giveitem', {\nhelp = 'Gives an item to a player',\nparams = {\n{\nname = 'target',\ntype = 'playerId',\nhelp = 'Target player\\'s server id',\n},\n{\nname = 'item',\ntype = 'string',\nhelp = 'Name of the item to give',\n},\n{\nname = 'count',\ntype = 'number',\nhelp = 'Amount of the item to give, or blank to give 1',\noptional = true,\n},\n{\nname = 'metatype',\nhelp = 'Sets the item\\'s \"metadata.type\"',\noptional = true,\n},\n},\nrestricted = 'group.admin'\n}, function(source, args, raw)\nlocal item = Items(args.item)\n\nif item then\nInventory.AddItem(args.target, item.name, args.count or 1, args.metatype)\nend\nend)"}},"/ox_lib/Modules/AddKeybind/Client":{"title":"Client","data":{"":"Registers keybinds and simplifies interactions of the keybinds.","ckeybind#CKeybind":"A table representing a keybind with the following properties.\nname: string\ndescription: string\ncurrentKey: string\nKey that the current user has this keybind set to\n\n\ndisabled: boolean\nWhether or not the keybind is currently disabled\n\n\nhash: number\nInternal hash of the keybind that is used to reference it within the game itself\n\n\ndefaultKey?: string\nDefault key to set the keybind to for new players\nNOTE: Changing this will not change the key for existing players\n\n\ndefaultMapper?: string\nSee Input Mapper Ids for more information\n\n\ndisable: function(self: CKeybind, disable: boolean)\nBuilt-in function to enable / disable a keybind\n\n\nonPressed?: function(self: CKeybind)\nUser-defined function triggered on keybind press\n\n\nonReleased?: function(self: CKeybind)\nUser-defined function triggered on keybind release","libaddkeybind#lib.addKeybind":"lib.addKeybind(data)\n\ndata: table\nname: string\ndescription: string\ndefaultKey?: string\nDefault: None\n\n\ndefaultMapper?: string\nDefault: keyboard\n\n\ndisabled?: boolean\nWhether or not the keybind should be disabled by default\n\n\nonPressed?: function(self: CKeybind)\nFunction triggered on keybind press\n\n\nonReleased?: function(self: CKeybind)\nFunction triggered on keybind release\n\n\n\n\n\n\nlocal keybind = lib.addKeybind({\nname = 'respects',\ndescription = 'press F to pay respects',\ndefaultKey = 'F',\nonPressed = function(self)\nprint(('pressed %s (%s)'):format(self.currentKey, self.name))\nend,\nonReleased = function(self)\nprint(('released %s (%s)'):format(self.currentKey, self.name))\nend\n})","enable--disable-keybinds#Enable / Disable Keybinds":"Keybinds can be enabled / disabled by using the disable method.\nkeybind:disable(true) -- disables the keybind\nkeybind:disable(false) -- enables the keybind"}},"/ox_lib/Modules/Cache/Client":{"title":"Client","data":{"":"Caches data related to the player.\nAn interval runs every 100ms to update data that cannot be checked via handlers.","states#States":"ped: number\nplayer entity id\n\n\nplayerId: number\nplayer id\n\n\nserverId: number\nplayer server id\n\n\nweapon: number or false\ncurrent weapon hash\n\n\nvehicle: number or false\nvehicle entity id\n\n\nseat: number or false\nvehicle seat index\n\n\ncoords: vector3\ncurrent player coords\nonly populated if using zones or points\ncannot be listened for with lib.onCache\n\n\nresource: string\ninvoking resource name\n\n\nmount: number or false (RedM only)\nmount entity id","liboncache#lib.onCache":"Register an event handler that is triggered when the cached value is updated.\n\n\nlib.onCache(key, function(value) end)\n\nkey: string\nped\nvehicle\nseat\nweapon\nmount (RedM only)\n\n\nvalue: any\n\n\nlib.onCache('vehicle', function(value)\nprint('old vehicle:', cache.vehicle)\nprint('new vehicle:', value)\nend)\n\n\n\nimport { onCache } from '@overextended/ox_lib/client';\n\nonCache(key, (value) => {});\n\nkey: string\nvalue: any\n\n\nimport { cache, onCache } from '@overextended/ox_lib/client';\n\nlib.onCache('vehicle', (value) => {\nconsole.log('old vehicle:', cache.vehicle);\nconsole.log('new vehicle:', value);\n});"}},"/ox_lib/Modules/Callback/JavaScript/Client":{"title":"Client","data":{"":"","trigger-server-callback#Trigger Server Callback":"","triggerservercallback#triggerServerCallback":"triggerServerCallback(eventName, delay, ...args)\n\neventName: string\ndelay: number or null\nAmount of time until this callback can be triggered again\n\n\n..args: any","register-client-callback#Register Client Callback":"","onservercallback#onServerCallback":"onServerCallback(eventName, cb)\n\neventName: string\ncb: function(...args: any)","usage-example#Usage Example":"For this example to fully make sense take a look at the example on the server page for the callbacks.\nimport { onServerCallback, triggerServerCallback } from '@overextended/ox_lib/client'\n\nonServerCallback('test:client', (...args: [number, number, string]) => {\nconsole.log(args);\nreturn {\nclientValue: 'Value from the client',\n};\n});\n\nsetTimeout(async () => {\nconst args = [1, null, 3, null, null, 6];\nconst response = await triggerServerCallback<{ serverValue: number }>('test:server', 1, args);\nif (!response) return;\nconsole.log('Response from server', response);\n}, 100);"}},"/ox_lib/Modules/Callback/JavaScript/Server":{"title":"Server","data":{"":"","trigger-client-callback#Trigger Client Callback":"","triggerclientcallback#triggerClientCallback":"triggerClientCallback(eventName, playerId, ...args)\n\neventName: string\nplayerId: number\n...args: any","register-server-callback#Register Server Callback":"","onclientcallback#onClientCallback":"onClientCallback(eventName, cb)\n\neventName: string\ncb: function(playerId: number, ...args: any)","usage-example#Usage Example":"For this example to fully make sense take a look at the example on the client page for the callbacks.\nimport { onClientCallback, triggerClientCallback } from '@overextended/ox_lib/server';\n\nonClientCallback('test:server', (playerId, ...args: [number, null, number, null, null, number]) => {\nconsole.log('onClientCallback', playerId, ...args);\nreturn {\nserverValue: 3000,\n};\n});\n\nsetTimeout(async () => {\nconst response = await triggerClientCallback<{ clientValue: string }>('test:client', 1, [1, null, 3, null, null, 6])\nif (!response) return;\nconsole.log(response.clientValue);\nconsole.log('Response from client', response);\n}, 100);"}},"/ox_lib/Modules/Callback/Lua/Client":{"title":"Client","data":{"":"","trigger-server-callback#Trigger Server Callback":"","libcallback#lib.callback":"The response is handled in a separate coroutine.\nlib.callback(name, delay, cb, ...)\n\nname: string\ndelay: number or false\nAmount of time until this callback can be triggered again\n\n\ncb: function\n...: any\n\n\nlib.callback('ox_inventory:getItemCount', false, function(count)\nprint(count)\nend, 'water', {type = 'fresh'})","libcallbackawait#lib.callback.await":"The current coroutine is yielded until a response is received.\nlib.callback.await(name, delay, ...)\n\nname: string\ndelay: number or false\nAmount of time until this callback can be triggered again\n\n\n...: any\n\n\nlocal count = lib.callback.await('ox_inventory:getItemCount', false, 'water', {type = 'fresh'})\nprint(count)","register-client-callback#Register Client Callback":"","libcallbackregister#lib.callback.register":"Register an event handler for responding to server requests.\nlib.callback.register(name, cb)\n\nname: string\ncb: function\n\n\nlib.callback.register('ox:getNearbyVehicles', function(radius)\nlocal nearbyVehicles = lib.getNearbyVehicles(GetEntityCoords(cache.ped), radius, true)\nreturn nearbyVehicles\nend)"}},"/ox_lib/Modules/Callback/Lua/Server":{"title":"Server","data":{"":"","trigger-client-callback#Trigger Client Callback":"","libcallback#lib.callback":"The response is handled in a separate coroutine.\nlib.callback(name, playerId, cb, ...)\n\nname: string\nplayerId: number\ncb: function\n...: any\n\n\nlib.callback('ox:getNearbyVehicles', source, function(vehicles)\nfor i = 1, #vehicles do\nDeleteEntity(entity)\nend\nend, args.radius)","libcallbackawait#lib.callback.await":"The current coroutine is yielded until a response is received.\nlib.callback.await(name, playerId, ...)\n\nname: string\nplayerId: number\n...: any\n\n\nlocal vehicles = lib.callback.await('ox:getNearbyVehicles', source, args.radius)\n\nfor i = 1, #vehicles do\nDeleteEntity(entity)\nend","register-server-callback#Register Server Callback":"","libcallbackregister#lib.callback.register":"Register an event handler for responding to client requests.\nlib.callback.register(name, cb)\n\nname: string\ncb: function\n\n\nlib.callback.register('ox_inventory:getItemCount', function(source, item, metadata, target)\nlocal inventory = target and Inventory(target) or Inventory(source)\nreturn (inventory and Inventory.GetItem(inventory, item, metadata, true)) or 0\nend)"}},"/ox_lib/Modules/Cron/Server":{"title":"Cron","data":{"":"A Lua implementation of cron, allowing tasks to be scheduled to run periodically at fixed times, dates, and intervals.","cron-expression#Cron expression":"A string containing five values separated by white spaces, representing a set of times to execute a task.\nField\tValid values\tMinutes\t0-59\tHours\t0-23\tDay of month\t1-31\tMonth\t1-12 or jan-dec\tDay of week\t1-7 or sun-sat\nNote: Day of the week is set to match os.date and starts at 1, unlike the cron-standard which starts at 0.","-wildcards#* Wildcards":"Represents all values, e.g. * * * * * will run every minute, or * * * * 1 will run every minute on Sunday.","-lists#, Lists":"Commas can be used to create a list of values, e.g. * * * * sun,mon,tue will run every minute on Sunday, Monday, and Tuesday.","--ranges#- Ranges":"Dashes define a range of values, e.g. 10-30 * * * * will start running the task at the 10th minute, and every minute until the 30th minute.","-steps#/ Steps":"Slashes can be used for step values, e.g. * */4 * * * will run every 4 hours and is shorthand for * 0,4,8,12,16,20 * * *.","functions#Functions":"","libcronnew#lib.cron.new":"Creates a new cronjob, scheduling a task to run at fixed times or intervals.\nlib.cron.new(expression, job, options)\n\nexpression: string\nA cron expression such as * * * * * representing minute, hour, day, month, and day of the week\n\n\njob: fun(task: OxTask, date: osdate)\noptions?: table\ndebug?: boolean\n\n\n\nreturns: OxTask"}},"/ox_lib/Modules/DisableControls/Client":{"title":"Client","data":{"":"A centralized way to track and disable controls.","libdisablecontrols#lib.disableControls":"Call on frame to disable all stored controls.\nlib.disableControls()","libdisablecontrolsadd#lib.disableControls:Add":"Adds the specified control(s) to the stored list.\nIf the control is already being tracked, the stored counter will be incremented.\nlib.disableControls:Add(...)\n\nvararg: number or table\nControl(s) to add a stored count of","libdisablecontrolsremove#lib.disableControls:Remove":"Removes the specified control(s) from the stored list.\nIf the stored counter for a given control is greater than one, the stored counter will be decremented.\nlib.disableControls:Remove(...)\n\nvararg: number or table\nControl(s) to remove a stored count of","libdisablecontrolsclear#lib.disableControls:Clear":"Clears the stored counter(s) for the specified control(s).\nlib.disableControls:Clear(...)\n\nvararg: number or table\nControl(s) to clear out from being tracked"}},"/ox_lib/Modules/GetClosestObject/Client":{"title":"Client","data":{"":"","libgetclosestobject#lib.getClosestObject":"Get the object handle and coords of the closest object to a set of coordinates.\nlib.getClosestObject(coords, maxDistance)\n\ncoords: vector3\nThe coords to check from.\n\n\nmaxDistance?: number\nThe max distance to check.\nDefault: 2.0\n\n\n\nReturn:\nobject?: number\ncoords?: vector3"}},"/ox_lib/Modules/GetClosestPed/Client":{"title":"Client","data":{"":"","libgetclosestped#lib.getClosestPed":"Get the ped handle and coords of the closest ped to a set of coordinates.\nlib.getClosestPed(coords, maxDistance)\n\ncoords: vector3\nThe coords to check from.\n\n\nmaxDistance?: number\nThe max distance to check.\nDefault: 2.0\n\n\n\nReturn:\nped?: number\ncoords?: vector3"}},"/ox_lib/Modules/GetClosestPlayer/Client":{"title":"Client","data":{"":"","libgetclosestplayer#lib.getClosestPlayer":"Get the player id, ped handle, and coords of the closest player to a set of coordinates.\nlib.getClosestPlayer(coords, maxDistance, includePlayer)\n\ncoords: vector3\nThe coords to check from.\n\n\nmaxDistance?: number\nThe max distance to check.\nDefault: 2.0\n\n\nincludePlayer?: boolean\nWhether or not to include the current player.\nDefault: false\n\n\n\nReturn:\nplayerId?: number\nplayerPed?: number\nplayerCoords?: vector3"}},"/ox_lib/Modules/GetClosestVehicle/Client":{"title":"Client","data":{"":"","libgetclosestvehicle#lib.getClosestVehicle":"Get the vehicle handle and coords of the closest vehicle to a set of coordinates.\nlib.getClosestVehicle(coords, maxDistance, includePlayerVehicle)\n\ncoords: vector3\nThe coords to check from.\n\n\nmaxDistance?: number\nThe max distance to check.\nDefault: 2.0\n\n\nincludePlayerVehicle?: boolean\nWhether or not to include the player's current vehicle.\nDefault: false\n\n\n\nReturn:\nvehicle?: number\nvehicleCoords?: vector3"}},"/ox_lib/Modules/GetNearbyObjects/Client":{"title":"Client","data":{"":"","libgetnearbyobjects#lib.getNearbyObjects":"Get the object handle and coords of all objects within range of a set of coordinates.\nlib.getNearbyObjects(coords, maxDistance)\n\ncoords: vector3\nThe coords to check from.\n\n\nmaxDistance?: number\nThe max distance to check.\nDefault: 2.0\n\n\n\nReturn:\nobjects: { object: number, coords: vector3 }[]"}},"/ox_lib/Modules/GetNearbyPeds/Client":{"title":"Client","data":{"":"","libgetnearbypeds#lib.getNearbyPeds":"Get the ped handle and coords of all peds within range of a set of coordinates.\nlib.getNearbyPeds(coords, maxDistance)\n\ncoords: vector3\nThe coords to check from.\n\n\nmaxDistance?: number\nThe max distance to check.\nDefault: 2.0\n\n\n\nReturn:\npeds: { ped: number, coords: vector3 }[]"}},"/ox_lib/Modules/GetNearbyPlayers/Client":{"title":"Client","data":{"":"","libgetnearbyplayers#lib.getNearbyPlayers":"Get the player id, ped handle, and coords of all players within range of a set of coordinates.\nlib.getNearbyPlayers(coords, maxDistance, includePlayer)\n\ncoords: vector3\nThe coords to check from.\n\n\nmaxDistance?: number\nThe max distance to check.\nDefault: 2.0\n\n\nincludePlayer?: boolean\nWhether or not to include the current player.\nDefault: false\n\n\n\nReturn:\nplayers: { id: number, ped: number, coords: vector3 }[]"}},"/ox_lib/Modules/GetNearbyVehicles/Client":{"title":"Client","data":{"":"","libgetnearbyvehicles#lib.getNearbyVehicles":"Get the vehicle handle and coords of all vehicles within range of a set of coordinates.\nlib.getNearbyVehicles(coords, maxDistance, includePlayerVehicle)\n\ncoords: vector3\nThe coords to check from.\n\n\nmaxDistance?: number\nThe max distance to check.\nDefault: 2.0\n\n\nincludePlayerVehicle?: boolean\nWhether or not to include the player's current vehicle.\nDefault: false\n\n\n\nReturn:\nvehicles: { vehicle: number, coords: vector3 }[]"}},"/ox_lib/Modules/Interface":{"title":"Interface","data":{"":"If you wish to change the primary colour for the UI to better match your server's theme you can do so easily through the available convars.They don't require you to build the UI, just restart the resource.Convars:\nsetr ox:primaryColor blue\nsetr ox:primaryShade 8\nChanging the primary colour will change the colour in elements such as the progress bar/circle, skill check, radial menu center button and hover,\ndialog confirm buttons, input field focus, and more.You can find the full list of preset colours and shades here:https://mantine.dev/theming/colors/#default-colorsIf you wish to create your own pallete I suggest following the guide on that page.\nKeep in mind doing so will require you to download the source code and build the UI."}},"/ox_lib/Modules/Interface/Client/alert":{"title":"Alert Dialog","data":{"":"Simple alert dialog that can display a message to the player.\nReturns whether the player pressed the confirm button or canceled the dialog.","libalertdialog#lib.alertDialog":"lib.alertDialog(data)\n\n\n\nTriggerClientEvent('ox_lib:alertDialog', source, data)\n\n\n\n\n\nThis function is asynchronous requiring you to do a .then callback on the promise or make your function async.\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.alertDialog(data);\n\n\n\ndata: table (object)\nheader: string\nDialog title.\n\n\ncontent: string\nDialog body content, supports markdown.\n\n\ncentered?: boolean\nCenters the dialog vertically and horizontally.\n\n\ncancel?: boolean\nDisplays a cancel button (ESC is still available if this is not defined).\n\n\nsize?: 'xs' or 'sm' or 'md' or 'lg' or 'xl'\noverflow?: boolean\nlabels?: table\nAllows you to define the displayed labels for cancel and/or confirm buttons.\ncancel?: string\nconfirm?: string\n\n\n\n\n\nReturns 'confirm' if the player pressed the confirm button, otherwise if the player pressed the cancel button\nor has exited the dialog with ESC the return will be 'cancel'.","libclosealertdialog#lib.closeAlertDialog":"Force closes the active alert dialog and sets its return data as nil\n\n\nlib.closeAlertDialog()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.closeAlertDialog();\n\n\nExample:\n\n\nlocal alert = lib.alertDialog({\nheader = 'Hello there',\ncontent = 'General Kenobi  \\n Markdown support!',\ncentered = true,\ncancel = true\n})\n\nprint(alert)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nconst alert = await lib.alertDialog({\nheader: 'Hello there',\ncontent: 'General Kenobi  \\n Markdown support!',\ncentered: true,\ncancel: true,\n});\n\nconsole.log(alert);"}},"/ox_lib/Modules/Interface/Client/clipboard":{"title":"Clipboard","data":{"":"","libsetclipboard#lib.setClipboard":"Sets the player's clipboard to the specified string value.\nWill not work if focus is already taken by some NUI component.\n\nTo create a new line use \\t\\n not just \\n in your string.\n\n\n\nlib.setClipboard(value)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.setClipboard(value);\n\n\n\nvalue: string"}},"/ox_lib/Modules/Interface/Client/context":{"title":"Context Menu","data":{"":"","libregistercontext#lib.registerContext":"Used for registering a context menu.\n\n\nlib.registerContext(context)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerContext(context);\n\n\n\nid: string\nUnique menu identifier, will be used to open the menu.\n\n\ntitle: string\nTitle display in the menu; has markdown support.\n\n\nmenu?: string\nMenu identifier - if defined there will be a back arrow next to the menu title that will take you to the menu you defined.\n\n\ncanClose: boolean\nIf set to false the user won't be able to exit the menu without pressing one of the buttons.\n\n\nonExit?: function\nFunction that will be ran when the user closes their context menu with ESC.\n\n\nonBack?: function\nFunction that will be ran when the user presses the back button to return to a previous menu.\n\n\noptions: table (object or array)\nitem: key (string) or table (object)\ntitle?: string\nIf not using keys then sets the title for the button; has markdown support.\n\n\ndisabled?: boolean\nGrays out the button and makes it unclickable.\n\n\nmenu?: string\nMenu identifier that the button will take you to, when defined an arrow.\n\n\nonSelect: function\nFunction that's ran when the button is clicked.\n\n\nicon?: string\nFontAwesome icon that will be displayed on the left side, works the same as notification and textui icons.\nAlso supports image urls, png and webp files but are not recommend to use over font awesome icons.\n\n\niconColor?: string\nColour of the displayed icon.\n\n\nprogress?: number\nAdds a progress bar filled to this percentage\n\n\ncolorScheme?: string\nSets the color scheme of the progress bar. Current options can be found here:\nhttps://mantine.dev/theming/colors/#default-colors\nFor example: blue or teal\n\n\n\n\narrow?: boolean\nShows an arrow on the right side like menu does, useful when you are opening a menu from an event. Can be set to false to hide it.\n\n\ndescription?: string\nDescription that will appear under the button title that is defined as a key; has markdown support.\n\n\nimage?: string\nUrl to an image that will be displayed in the button's metadata.\n\n\nmetadata?: string[] or object or array\nInformation that will display on the side upon hovering a button.\nlabel: string\nvalue: any\nprogress?: number\nDisplay a progress bar in the metadata.\n\n\n\n\nevent?: string\nEvent that the button is going to trigger.\n\n\nserverEvent?: string\nServer event that the button is going to trigger.\n\n\nargs?: any\nArguments that will be sent to the events or onSelect function.\n\n\n\n\n\n\n\nYou can register as many context menus in one lib.registerContext function\nas you'd like.The menu can be either in the order you write it in, or sorted alphabetically.\nTo sort the menu alphabetically the buttons (and/or metadata) need to be defined as keys, otherwise not using keys and instead using tables will make the menu be in the order you define it as.","libshowcontext#lib.showContext":"Opens a registered context menu by its id.\n\n\nlib.showContext(id)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.showContext(id);\n\n\n\nid: string","libhidecontext#lib.hideContext":"Hides any currently visible context menu.\n\n\nlib.hideContext(onExit)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.hideContext(onExit);\n\n\n\nonExit: boolean\nDefines whether the onExit function for the menu should be ran or not.","libgetopencontextmenu#lib.getOpenContextMenu":"Returns the id of the currently open context menu.If no context menu is open returns nil.\n\n\nlib.getOpenContextMenu()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.getOpenContextMenu();","usage-example#Usage Example":"First we register the menu with our specified options then we call the show function in the command.\nAvoid constantly re-registering a menu that does not depend on any outside values (A.K.A a static menu).\n\n\n\nlib.registerContext({\nid = 'some_menu',\ntitle = 'Some context menu',\noptions = {\n{\ntitle = 'Empty button',\n},\n{\ntitle = 'Disabled button',\ndescription = 'This button is disabled',\nicon = 'hand',\ndisabled = true\n},\n{\ntitle = 'Example button',\ndescription = 'Example button description',\nicon = 'circle',\nonSelect = function()\nprint(\"Pressed the button!\")\nend,\nmetadata = {\n{label = 'Value 1', value = 'Some value'},\n{label = 'Value 2', value = 300}\n},\n},\n{\ntitle = 'Menu button',\ndescription = 'Takes you to another menu!',\nmenu = 'other_menu',\nicon = 'bars'\n},\n{\ntitle = 'Event button',\ndescription = 'Open a menu from the event and send event data',\nicon = 'check',\nevent = 'test_event',\narrow = true,\nargs = {\nsomeValue = 500\n}\n}\n}\n})\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerContext({\nid: 'some_menu',\ntitle: 'Some context menu',\noptions: [\n{\ntitle: 'Empty button',\n},\n{\ntitle: 'Disabled button',\ndescription: 'This button is disabled',\nicon: 'hand',\ndisabled: true,\n},\n{\ntitle: 'Example button',\ndescription: 'Example button description',\nicon: 'circle',\nonSelect: () => {\nconsole.log('Pressed the button!');\n},\nmetadata: [\n{ label: 'Value 1', value: 'Some value' },\n{ label: 'Value 2', value: 300 },\n],\n},\n{\ntitle: 'Menu button',\ndescription: 'Takes you to another menu!',\nmenu: 'other_menu',\nicon: 'bars',\n},\n{\ntitle: 'Event button',\ndescription: 'Open a menu from the event and send event data',\nicon: 'check',\nevent: 'test_event',\narrow: true,\nargs: {\nsomeValue: 500,\n},\n},\n],\n});\n\n\nThen we can also register our second menu called other_menu\n\n\nlib.registerContext({\nid = 'other_menu',\ntitle = 'Other context menu',\nmenu = 'some_menu',\nonBack = function()\nprint('Went back!')\nend,\noptions = {\n{\ntitle = 'Nothing here'\n}\n}\n})\n\n\n\nlib.registerContext({\nid: 'other_menu',\ntitle: 'Other context menu',\nmenu: 'some_menu',\nonBack: () => {\nconsole.log('Went back!');\n},\noptions: [\n{\ntitle: 'Nothing here',\n},\n],\n});\n\n\nAnd the event that we are going to run from the some_menu menu, which is going to open another menu.\n\n\nRegisterNetEvent('test_event', function(args)\nlib.registerContext({\nid = 'event_menu',\ntitle = 'Event menu',\nmenu = 'some_menu',\noptions = {\n{\ntitle = 'Event value: '..args.someValue,\n}\n}\n})\n\nlib.showContext('event_menu')\nend)\n\n\n\nonNet('test_event', (args: { someValue: number }) => {\nlib.registerContext({\nid: 'event_menu',\ntitle: 'Event menu',\nmenu: 'some_menu',\noptions: [\n{\ntitle: `Event value: ${args.someValue}`,\n},\n],\n});\n\nlib.showContext('event_menu');\n});\n\n\nLastly we register a test command to show the some_menu menu.\n\n\nRegisterCommand('testcontext', function()\nlib.showContext('some_menu')\nend)\n\n\n\nRegisterCommand('testcontext', () => {\nlib.showContext('some_menu');\n});\n\n\nThe data from the args table in the menu is passed as a first argument to the event you register.Using this event we also register a new context menu with it's own options.By defining a menu param to be the id of the first menu we can get the back arrow button next to the menu title that will take us back."}},"/ox_lib/Modules/Interface/Client/input":{"title":"Input Dialog","data":{"":"The input dialog window allows you to take data from the user\nby setting input fields.","libinputdialog#lib.inputDialog":"lib.inputDialog(heading, rows, options)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.inputDialog(heading, rows, options);\n\n\n\nheading: string\nrows: string[] or table (array)\ntype: 'input' or 'number' or 'checkbox' or 'select' or 'slider' or 'color' or 'multi-select' or 'date' or 'date-range' or 'time' or 'textarea'\n\n\noptions?: table(object)\nallowCancel: boolean\nIf true the user will not be able to cancel and close the input dialog until submitted.\n\n\n\n\n\nAvailable properties per field type:\ninput\nlabel: string\ndescription?: string\nplaceholder?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: string\npassword?: boolean\nmin?: number\nmax?: number\n\n\nnumber\nlabel: string\ndescription?: string\nplaceholder?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: number\nmin?: number\nmax?: number\n\n\ncheckbox\nlabel: string\nchecked?: boolean\ndisabled?: boolean\nrequired?: boolean\n\n\nselect and multi-select\nlabel: string\noptions: table(array)\nvalue: string\nlabel?: string\n\n\ndescription?: string\nplaceholder?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: string\nvalue of the default option.\n\n\nclearable?: boolean\n\n\nslider\nlabel: string\nplaceholder?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: number\nmin?: number\nmax?: number\nstep?: number\n\n\ncolor\nlabel: string\ndescription?: string\nplaceholder?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: string\nformat?: 'hex' | 'hexa' | 'rgb' | 'rgba' | 'hsl' | 'hsla';\n\n\ndate\nlabel: string\ndescription?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: string or true\nTrue defaults to current date\n\n\nformat?: string\nDate format to display in the field\n\n\nclearable?: boolean\nmin?: string\n\"01/01/2000\"\n\n\nmax?: string\n\"12/12/2023\"\n\n\n\n\ndate-range\nlabel: string\ndescription?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: [string, string]\nformat?: string\nDate format to display in the field\n\n\nclearable?: boolean\n\n\ntime\nlabel: string\ndescription?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: string\nformat?: '12' or '24'\nclearable?: boolean\n\n\ntextarea\nlabel: string\ndescription?: string\nplaceholder?: string\nicon?: string\nrequired? boolean\ndisabled?: boolean\ndefault?: number\nmin?: number\nMinimum amount of rows the text area will take.\n\n\nmax?: number\nMaxmimum amount of rows the text area will take, when exceeded goes into overflow.\n\n\nautosize?: boolean\nIf true text area will grow with content until max rows are reached.\n\n\n\n\n\nThe callback data is promise based meaning that the thread will not continue executing until the user either sends the data or exits the popup.The data returned will be a table (array), indexes represent the rows sent to the dialog, so if we want data from the first field that would be index 1 (0), if we want data from the third field, that would be index 3 (2), etc...\nField types such as date, date-range and time return a unix timestamp on the set value.","libcloseinputdialog#lib.closeInputDialog":"Force closes the active input dialog and sets its return data as nil\n\n\nlib.closeInputDialog()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.closeInputDialog();","usage-example#Usage Example":"","basic#Basic":"local input = lib.inputDialog('Basic dialog', {'First row', 'Second row'})\n\nif not input then return end\nprint(json.encode(input), input[1], input[2])\n\n\n\nThis function is asynchronous requiring you to do a .then callback on the promise or make your function async.\n\nconst input = await lib.inputDialog('Basic dialog', ['First row', 'Second row']);\n\nif (!input) return;\nconsole.log(input, input[0], input[1]);","advanced#Advanced":"local input = lib.inputDialog('Dialog title', {\n{type = 'input', label = 'Text input', description = 'Some input description', required = true, min = 4, max = 16},\n{type = 'number', label = 'Number input', description = 'Some number description', icon = 'hashtag'},\n{type = 'checkbox', label = 'Simple checkbox'},\n{type = 'color', label = 'Colour input', default = '#eb4034'},\n{type = 'date', label = 'Date input', icon = {'far', 'calendar'}, default = true, format = \"DD/MM/YYYY\"}\n})\n\nprint(json.encode(input))\n\n-- Getting rgb values from colour picker\nlocal rgb = lib.math.torgba(input[4])\n\n-- Transforming date timestamp to a readable format with Lua's os library (server-only)\nlocal timestamp = math.floor(input[5] / 1000)\nlocal date = os.date('%Y-%m-%d %H:%M:%S', timestamp)\n\n\n\nThis function is asynchronous requiring you to do a .then callback on the promise or make your function async.\n\nconst input = await lib.inputDialog('Police locker', [\n{ type: 'input', label: 'Text input', description: 'Some input description', required: true, min: 3, max: 16 },\n{ type: 'number', label: 'Number input', description: 'Some number description', icon: 'hashtag' },\n{ type: 'checkbox', label: 'Simple checkbox' },\n{ type: 'color', label: 'Colour input', default: '#eb4034' },\n{ type: 'date', label: 'Date input', icon: ['far', 'calendar'], default: true, format: 'DD/MM/YYYY' },\n]);\n\nconsole.log(JSON.stringify(input, null, 2));\n\n// Getting r, g and b values from colour picker\nconst regExp = /rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/;\nconst colourInput = input[3];\n\nconst color = regExp.exec(colourInput);\n\nif (!color) return;\n\nconsole.log(+color[1], +color[2], +color[3]);"}},"/ox_lib/Modules/Interface/Client/menu":{"title":"Menu","data":{"":"Keyboard navigation menu with specific event functions.","libregistermenu#lib.registerMenu":"Registers and caches a menu under the specified id.\n\n\nlib.registerMenu(data, cb)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerMenu(data, cb);\n\n\n\ndata: table (object)\nid: string\ntitle: string\noptions: table (array)\nlabel: string\nprogress?: number\ncolorScheme?: string\nicon?: string\nFontAwesome icon that will be displayed on the left side, works the same as notification and textui icons.\nAlso supports image urls, png and webp files but are not recommend to use over font awesome icons.\n\n\niconColor?: string\nvalues?: string[] or { label: string, description: string }[]\nIf provided creates a side scrollable list.\nWhen using object and setting description, the set description will be displayed in the menu tooltip.\n\n\nchecked?: boolean\nSetting either true or false will make the button a checkbox, if values is also provided the button will be a\nscrollable list.\n\n\ndescription?: string\nDisplays tooltip below menu on hovered item with provided description.\n\n\ndefaultIndex?: number\nSets the current index for the list to specified number.\n\n\nargs?: {[string]: any}\nAllows you to pass any arguments through the button.\nIf the button has values then isScroll is automatically passed.\nIf the button has checked to either true or false then isCheck is automatically passed.\n\n\nclose?: boolean\nIf set to false, it won't close the menu upon interacting with this option.\n\n\n\n\nposition?: 'top-left' or 'top-right' or 'bottom-left' or 'bottom-right'\nDefault: 'top-left'\n\n\ndisableInput?: boolean\nDefault: false\n\n\ncanClose: boolean\nIf set to false the user won't be able to exit the menu without pressing one of the buttons.\n\n\nonClose: function(keyPressed?: 'Escape' | 'Backspace')\nFunction that runs when the menu is exited via ESC/Backspace.\n\n\nonSelected: function(selected: number, secondary: number | boolean, args: {[string]: any})\nFunction being ran when the selected button in the menu changes.\n\n\nonSideScroll: function(selected: number, scrollIndex: number, args: {[string]: any})\nFunction ran whenever a scroll list item is changed.\n\n\nonCheck: function(selected: number, checked: boolean, args: {[string]: any})\nFunction ran whenever a checkbox is toggled.\n\n\n\n\ncb: function(selected: number, scrollIndex: number, args: {[string]: any})\nCallback function when the menu item is pressed.","libshowmenu#lib.showMenu":"Displays the menu with the provided id.\n\n\nlib.showMenu(id)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.showMenu(id);\n\n\n\nid: string","libhidemenu#lib.hideMenu":"lib.hideMenu(onExit)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.hideMenu(onExit);\n\n\n\nonExit?: boolean\nIf true runs the menu's onClose function.","libgetopenmenu#lib.getOpenMenu":"Returns the id of the currently open menu.\n\n\nlib.getOpenMenu()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.getOpenMenu();","libsetmenuoptions#lib.setMenuOptions":"lib.setMenuOptions(id, options, index)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.setMenuOptions(id, options, index);\n\n\n\nid: string\noptions: table (object or array)\nindex?: number\nIf specified only sets the options table on the specified options index.\n\n\n\nExample:Replaces the 3rd index option of the specified menu\n\n\nlib.setMenuOptions('some_menu_id', {label = 'New option', icon = 'plus'}, 3)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.setMenuOptions('some_menu_id', { label: 'New option', icon: 'plus' }, 3);","usage-example#Usage Example":"First we register the menu with our specified options then we call the show function in the command.\nAvoid constantly re-registering a menu that does not depend on any outside values (A.K.A a static menu).\n\n\n\nlib.registerMenu({\nid = 'some_menu_id',\ntitle = 'Menu title',\nposition = 'top-right',\nonSideScroll = function(selected, scrollIndex, args)\nprint(\"Scroll: \", selected, scrollIndex, args)\nend,\nonSelected = function(selected, secondary, args)\nif not secondary then\nprint(\"Normal button\")\nelse\nif args.isCheck then\nprint(\"Check button\")\nend\n\nif args.isScroll then\nprint(\"Scroll button\")\nend\nend\nprint(selected, secondary, json.encode(args, {indent=true}))\nend,\nonCheck = function(selected, checked, args)\nprint(\"Check: \", selected, checked, args)\nend,\nonClose = function(keyPressed)\nprint('Menu closed')\nif keyPressed then\nprint(('Pressed %s to close the menu'):format(keyPressed))\nend\nend,\noptions = {\n{label = 'Simple button', description = 'It has a description!'},\n{label = 'Checkbox button', checked = true},\n{label = 'Scroll button with icon', icon = 'arrows-up-down-left-right', values={'hello', 'there'}},\n{label = 'Button with args', args = {someArg = 'nice_button'}},\n{label = 'List button', values = {'You', 'can', 'side', 'scroll', 'this'}, description = 'It also has a description!'},\n{label = 'List button with default index', values = {'You', 'can', 'side', 'scroll', 'this'}, defaultIndex = 5},\n{label = 'List button with args', values = {'You', 'can', 'side', 'scroll', 'this'}, args = {someValue = 3, otherValue = 'value'}},\n}\n}, function(selected, scrollIndex, args)\nprint(selected, scrollIndex, args)\nend)\n\nRegisterCommand('testmenu', function()\nlib.showMenu('some_menu_id')\nend)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerMenu(\n{\nid: 'some_menu_id',\ntitle: 'Menu title',\nposition: 'top-right',\nonSideScroll: (selected, scrollIndex, args) => {\nconsole.log('Scroll: ', selected, scrollIndex, args);\n},\nonSelected: (selected, secondary, args) => {\nif (!secondary) {\nconsole.log('Normal button');\n} else {\nif (args.isCheck) {\nconsole.log('Check button');\n}\n\nif (args.isScroll) {\nconsole.log('Scroll button');\n}\n}\nconsole.log(selected, secondary, JSON.stringify(args, null, 2));\n},\nonCheck: (selected, checked, args) => {\nconsole.log('Check: ', selected, checked, args);\n},\nonClose: (keyPressed) => {\nconsole.log('Menu closed');\nif (keyPressed) {\nconsole.log(`Pressed ${keyPressed} to close the menu`);\n}\n},\noptions: [\n{ label: 'Simple button', description: 'It has a description!' },\n{ label: 'Checkbox button', checked: true },\n{ label: 'Scroll button with icon', icon: 'arrows-up-down-left-right', values: ['hello', 'there'] },\n{ label: 'Button with args', args: { someArg: 'nice_button' } },\n{\nlabel: 'List button',\nvalues: ['You', 'can', 'side', 'scroll', 'this'],\ndescription: 'It also has a description!',\n},\n{ label: 'List button with default index', values: ['You', 'can', 'side', 'scroll', 'this'], defaultIndex: 5 },\n{\nlabel: 'List button with args',\nvalues: ['You', 'can', 'side', 'scroll', 'this'],\nargs: { someValue: 3, otherValue: 'value' },\n},\n],\n},\n(selected, scrollIndex, args) => {\nconsole.log(selected, scrollIndex, args);\n}\n);\n\nRegisterCommand(\n'testmenu',\n() => {\nlib.showMenu('some_menu_id');\n},\nfalse\n);"}},"/ox_lib/Modules/Interface/Client/notify":{"title":"Notifications","data":{"":"","libnotify#lib.notify":"Custom notifications with a lot of styling options.\n\n\n\n\nlib.notify(data)\n\n\n\nTriggerClientEvent('ox_lib:notify', source, data)\n\n\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.notify(data);\n\n\n\nid?: string\nWhen set the current notification will be unique and only shown once on screen when spammed.\n\n\ntitle?: string\nMust provide if there is no description\n\n\ndescription?: string\nMust provide if there is no title\nMarkdown support\n\n\nduration?: number\nposition?: 'top' or 'top-right' or 'top-left' or 'bottom' or 'bottom-right' or 'bottom-left' or 'center-right' or 'center-left'\nDefault: 'top-right'\n\n\ntype?: 'inform' or 'error' or 'success'or 'warning'\nDefault: 'inform'\n\n\nstyle?: table (object)\nReact CSS styling format\n\n\nicon?: string\nFont Awesome 6 icon name\n\n\niconColor: string\n\n\nSetting iconColor will get rid of the contrasted icon colour and it's circular background.","usage-example#Usage Example":"","standard#Standard":"lib.notify({\ntitle = 'Notification title',\ndescription = 'Notification description',\ntype = 'success'\n})\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.notify({\ntitle: 'Notification title',\ndescription: 'Notification description',\ntype: 'success',\n});","custom#Custom":"lib.notify({\nid = 'some_identifier',\ntitle = 'Notification title',\ndescription = 'Notification description',\nposition = 'top',\nstyle = {\nbackgroundColor = '#141517',\ncolor = '#C1C2C5',\n['.description'] = {\ncolor = '#909296'\n}\n},\nicon = 'ban',\niconColor = '#C53030'\n})\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.notify({\nid: 'some_identifier',\ntitle: 'Notification title',\ndescription: 'Notification description',\nposition: 'top',\nstyle: {\nbackgroundColor: '#141517',\ncolor: '#C1C2C5',\n'.decription': {\ncolor: '#909296',\n},\n},\nicon: 'ban',\niconColor: '#C53030',\n});"}},"/ox_lib/Modules/Interface/Client/progress":{"title":"Progress","data":{"":"","libprogressbar#lib.progressBar":"Displays a running progress bar.\n\n\nlib.progressBar(data)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.progressBar(data)\n\n\n\nduration: number\nlabel: string\nuseWhileDead?: boolean\nallowRagdoll?: boolean\nallowCuffed?: boolean\nallowFalling?: boolean\ncanCancel?: boolean\nanim?: table (object)\ndict?: string\nMust specify either scenario or dict\n\n\nclip: string\nflag?: number\nDefault: 49\n\n\nblendIn?: float\nDefault: 3.0\n\n\nblendOut?: float\nDefault: 1.0\n\n\nduration?: number\nDefault: -1\nplaybackRate?: number\nDefault: 0\nlockX?: boolean\nlockY?: boolean\nlockZ?: boolean\nscenario?: string\nMust specify either scenario or dict\n\n\nplayEnter?: boolean\nDefault: true\n\n\n\n\nprop?: table (object or array)\n[ If you want to define multiple props, you can pass them as individual tables (array of objects) ]\nmodel: hash\nbone?: number\nDefault: 60309\n\n\npos: table\nx: number\ny: number\nz: number\n\n\nrot: table (object)\nx: number\ny: number\nz: number\n\n\n\n\ndisable?: table (object)\nmove?: boolean\ncar?: boolean\ncombat?: boolean\nmouse?: boolean","usage-example#Usage Example":"if lib.progressBar({\nduration = 2000,\nlabel = 'Drinking water',\nuseWhileDead = false,\ncanCancel = true,\ndisable = {\ncar = true,\n},\nanim = {\ndict = 'mp_player_intdrink',\nclip = 'loop_bottle'\n},\nprop = {\nmodel = `prop_ld_flow_bottle`,\npos = vec3(0.03, 0.03, 0.02),\nrot = vec3(0.0, 0.0, -1.5)\n},\n}) then print('Do stuff when complete') else print('Do stuff when cancelled') end\n\n\n\nThis function is asynchronous requiring you to do a .then callback on the promise or make your function async.\n\nimport lib from '@overextended/ox_lib/client'\n\nif (await lib.progressBar({\nduration: 2000,\nlabel: 'Drinking water',\nuseWhileDead: false,\ncanCancel: true,\ndisable: {\ncar: true,\n},\nanim: {\ndict: 'mp_player_intdrink',\nclip: 'loop_bottle'\n},\nprop: {\nmodel: `prop_ld_flow_bottle`,\npos: {x: 0.03, y: 0.03, z: 0.02},\nrot: {x: 0.0, y: 0.0, z: -1.5}\n},\n})) console.log('Do stuff when complete');\nelse console.log('Do stuff when cancelled')","libprogresscircle#lib.progressCircle":"Similar to lib.progressBar except it displays a circle and you can define a position.\n\n\nlib.progressCircle(data)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.progressCircle(data)\n\n\n\nduration: number\nlabel?: string\nposition?: 'middle' or 'bottom'\nDefault: 'middle'\n\n\nuseWhileDead?: boolean\nallowRagdoll?: boolean\nallowCuffed?: boolean\nallowFalling?: boolean\ncanCancel?: boolean\nanim?: table (object)\ndict?: string\nMust specify either scenario or dict\n\n\nclip: string\nflag?: number\nDefault: 49\n\n\nblendIn?: float\nDefault: 3.0\n\n\nblendOut?: float\nDefault: 1.0\n\n\nduration?: number\nDefault: -1\nplaybackRate?: number\nDefault: 0\nlockX?: boolean\nlockY?: boolean\nlockZ?: boolean\nscenario?: string\nMust specify either scenario or dict\n\n\nplayEnter?: boolean\nDefault: true\n\n\n\n\nprop?: table (object or array)\n[ If you want to define multiple props, you can pass them as individual tables (array of objects) ]\nmodel: hash\nbone?: number\nDefault: 60309\n\n\npos: table\nx: number\ny: number\nz: number\n\n\nrot: table (object)\nx: number\ny: number\nz: number\n\n\n\n\ndisable?: table (object)\nmove?: boolean\ncar?: boolean\ncombat?: boolean\nmouse?: boolean","usage-example-1#Usage Example":"if lib.progressCircle({\nduration = 2000,\nposition = 'bottom',\nuseWhileDead = false,\ncanCancel = true,\ndisable = {\ncar = true,\n},\nanim = {\ndict = 'mp_player_intdrink',\nclip = 'loop_bottle'\n},\nprop = {\nmodel = `prop_ld_flow_bottle`,\npos = vec3(0.03, 0.03, 0.02),\nrot = vec3(0.0, 0.0, -1.5)\n},\n}) then print('Do stuff when complete') else print('Do stuff when cancelled') end\n\n\n\nThis function is asynchronous requiring you to do a .then callback on the promise or make your function async.\n\nimport lib from '@overextended/ox_lib/client'\n\nif (await lib.progressCircle({\nduration: 2000,\nposition: 'bottom',\nuseWhileDead: false,\ncanCancel: true,\ndisable: {\ncar: true,\n},\nanim: {\ndict: 'mp_player_intdrink',\nclip: 'loop_bottle'\n},\nprop: {\nmodel: `prop_ld_flow_bottle`,\npos: {x: 0.03, y: 0.03, z: 0.02},\nrot: {x: 0.0, y: 0.0, z: -1.5}\n},\n})) console.log('Do stuff when complete')\nelse console.log('Do stuff when cancelled')","libprogressactive#lib.progressActive":"Returns true if a progress bar is currently active.\n\n\nlib.progressActive()\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.progressActive()","libcancelprogress#lib.cancelProgress":"If there is a progress bar active and the\nprogress bar can be cancelled then it cancels it.\n\n\nlib.cancelProgress()\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.cancelProgress()"}},"/ox_lib/Modules/Interface/Client/radial":{"title":"Radial Menu","data":{"":"Radial menu has a global menu that's by default accessed with z and only displays when there is at least one item.\nYou can add and remove items from the global menu using lib.addRadialItem and lib.removeRadialItem.\nUse lib.registerRadial for creating sub menus and use the menu property on the items to open those sub menus.","libaddradialitem#lib.addRadialItem":"Item or array of items added to the global radial menu.\n\n\nlib.addRadialItem(items)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.addRadialItem(items);\n\n\n\nitems: table (object or array)\nid: string\nId that is used for removing options.\n\n\nicon: string\nlabel: string\nLabel uses   \\n to insert a newline\n\n\nmenu?: string\nId of a menu to open.\n\n\nonSelect: function(currentMenu: string | nil, itemIndex: number) | string\nFunction that's ran when a user clicks the item.\n\n\nkeepOpen?: boolean","libremoveradialitem#lib.removeRadialItem":"Id of an item to be removed from the global menu.\n\n\nlib.removeRadialItem(item)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.removeRadialItem(item);\n\n\n\nid: string","libclearradialitems#lib.clearRadialItems":"Removes all items from the radial menu.\n\n\nlib.clearRadialItems()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.clearRadialItems();","libregisterradial#lib.registerRadial":"Registers a radial sub menu with predefined options.\n\n\nlib.registerRadial(radial)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.registerRadial(radial);\n\n\n\nradial: table (object)\nid: string\nUnique menu id used to open with menu prop on an item.\n\n\nitems: array\nicon: string\nlabel: string\nLabel uses   \\n to insert a newline\n\n\nmenu?: string\nId of a menu to open.\n\n\nonSelect?: function(currentMenu: string | nil, itemIndex: number) | string\nFunction that's ran when a user clicks the item.","libhideradial#lib.hideRadial":"Hides the radial menu if one is open.\n\n\nlib.hideRadial()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.hideRadial();","libdisableradial#lib.disableRadial":"Disallow players from opening the radial menu.\n\n\nlib.disableRadial(state)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.disableRadial(state);\n\n\n\nstate: boolean\nWhether or not radial menu should be disabled","libgetcurrentradialid#lib.getCurrentRadialId":"Returns the id of the currently open radial menu.\n\n\nlocal id = lib.getCurrentRadialId()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlet id = lib.getCurrentRadialId();","usage-example#Usage Example":"When adding radial menu items whether they are global or for a sub menu, make sure to stick to short as possible labels\nas long labels will look out of place and should not be used with the radial menu because of its density.\nHere's a use case example with some global options and an option utilising the lib's points system.\n\n\nexports('myMenuHandler', function(menu, item)\nprint(menu, item)\n\nif menu == 'police_menu' and item == 1 then\nprint('Handcuffs')\nend\nend)\n\nlib.registerRadial({\nid = 'police_menu',\nitems = {\n{\nlabel = 'Handcuff',\nicon = 'handcuffs',\nonSelect = 'myMenuHandler'\n},\n{\nlabel = 'Frisk',\nicon = 'hand'\n},\n{\nlabel = 'Fingerprint',\nicon = 'fingerprint'\n},\n{\nlabel = 'Jail',\nicon = 'bus'\n},\n{\nlabel = 'Search',\nicon = 'magnifying-glass',\nonSelect = function()\nprint('Search')\nend\n}\n}\n})\n\nlib.addRadialItem({\n{\nid = 'police',\nlabel = 'Police',\nicon = 'shield-halved',\nmenu = 'police_menu'\n},\n{\nid = 'business_stuff',\nlabel = 'Business',\nicon = 'briefcase',\nonSelect = function()\nprint(\"Business\")\nend\n}\n})\n\nlocal coords = GetEntityCoords(cache.ped)\nlocal point = lib.points.new(coords, 5)\n\nfunction point:onEnter()\nlib.addRadialItem({\nid = 'garage_access',\nicon = 'warehouse',\nlabel = 'Garage',\nonSelect = function()\nprint('Garage')\nend\n})\nend\n\nfunction point:onExit()\nlib.removeRadialItem('garage_access')\nend\n\n\n\nPoints system in the lib isn't available for the npm package.\n\nimport lib from '@overextended/ox_lib/client'\n\nexports('myMenuHandler', (menu, item) => {\nconsole.log(menu, item)\n\nif (menu === 'police_menu' and item === 1) {\nconsole.log('Handcuffs')\n}\n})\n\nlib.registerRadial({\nid: 'police_menu',\nitems: [\n{\nlabel: 'Handcuff',\nicon: 'handcuffs',\nonSelect: 'myMenuHandler'\n},\n{\nlabel: 'Frisk',\nicon: 'hand'\n},\n{\nlabel: 'Fingerprint',\nicon: 'fingerprint'\n},\n{\nlabel: 'Jail',\nicon: 'bus'\n},\n{\nlabel: 'Search',\nicon: 'magnifying-glass',\nonSelect: () => {\nconsole.log('Search')\n}\n}\n]\n})\n\nlib.addRadialItem([\n{\nid: 'police',\nlabel: 'Police',\nicon: 'shield-halved',\nmenu: 'police_menu'\n},\n{\nid: 'business_stuff',\nlabel: 'Business',\nicon: 'briefcase',\nonSelect: () => {\nconsole.log('Business')\n}\n}\n])"}},"/ox_lib/Modules/Interface/Client/skillcheck":{"title":"Skill Check","data":{"":"","libskillcheck#lib.skillCheck":"Runs a skill check with the defined difficulty.\n\n\nlib.skillCheck(difficulty, inputs)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.skillCheck(difficulty, inputs);\n\n\n\ndifficulty: 'easy' or 'medium' or 'hard' or table\nPreset difficulties:\n'easy' - { areaSize: 50, speedMultiplier: 1 }\n'medium' - { areaSize: 40, speedMultiplier: 1.5 }\n'hard' - { areaSize: 25, speedMultiplier: 1.75 }\n\n\nCustom difficulties can be set by sending an object instead of one of the preset strings above\nareaSize: number\nSize of the success area in degrees\n\n\nspeedMultiplier: number\nMultiplier for the speed of the indicator\n\n\n\n\n\n\ninputs?: string[]\nA random key will be picked from the inputs table for each skill check\nIf no inputs are defined the key is defaulted to e","usage-example#Usage Example":"local success = lib.skillCheck({'easy', 'easy', {areaSize = 60, speedMultiplier = 2}, 'hard'}, {'w', 'a', 's', 'd'})\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nconst success = await lib.skillCheck(\n['easy', 'easy', { areaSize: 60, speedMultiplier: 2 }, 'hard'],\n['w', 'a', 's', 'd']\n);"}},"/ox_lib/Modules/Interface/Client/textui":{"title":"TextUI","data":{"":"","libshowtextui#lib.showTextUI":"Show the TextUI window.\nDO NOT run this function every tick, it's intended to be used as a toggle.\n\n\n\nlib.showTextUI(text, options)\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.showTextUI(text, options);\n\n\n\ntext: string\noptions?: table\nposition?: 'right-center' or 'left-center' or 'top-center'\nDefault: 'right-center'\n\n\nicon?: string or table (array)\niconColor?: string\nstyle?: React.CSSProperties","libhidetextui#lib.hideTextUI":"Hides the currently visible TextUI window\n\n\nlib.hideTextUI()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.hideTextUI();","usage-example#Usage Example":"","basic#Basic":"lib.showTextUI('[E] - Fuel vehicle')\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.showTextUI('[E] - Fuel vehicle');","custom-styling#Custom styling":"lib.showTextUI('[E] - Pick apple', {\nposition = \"top-center\",\nicon = 'hand',\nstyle = {\nborderRadius = 0,\nbackgroundColor = '#48BB78',\ncolor = 'white'\n}\n})\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.showTextUI('[E] - Pick apple', {\nposition: 'top-center',\nicon: 'hand',\nstyle: {\nborderRadius: 0,\nbackgroundColor: '#48BB78',\ncolor: 'white',\n},\n});","libistextuiopen#lib.isTextUIOpen":"Returns whether Text UI is opened or not\n\n\nlib.isTextUIOpen()\n\n\n\nimport lib from '@overextended/ox_lib/client';\n\nlib.isTextUIOpen();"}},"/ox_lib/Modules/Locale/Shared":{"title":"Shared","data":{"":"Allows servers to set a preferred language and attempt to load locale files in any resources using the module.\nLocale files should use the ISO Language Code and be saved as ./locales/langcode.json","setup#Setup":"To change the preferred language from English, add the convar to your server.cfg and change en to the desired language code.\nsetr ox:locale en\nCreate a locales directory and a file for your language.\n{\n\"grand_theft_auto\": \"grand theft auto\",\n\"male\": \"male\",\n\"female\": \"female\",\n\"suspect_sex\": \"suspect is %s\"\n}\n\n{\n\"grand_theft_auto\": \"vol de voiture\",\n\"male\": \"homme\",\n\"female\": \"femme\",\n\"suspect_sex\": \"le suspect est %s\"\n}\n\nfiles {\n'locales/*.json'\n}","usage#Usage":"Initialise the locale module in your resource (once).\nlib.locale()\nFormat your strings with the new locale global.\nAdditional arguments can be sent to format the locale output.\nlocale(str, ...)\n\nstr: string\nvararg?: string or number\n\n\n-- Load the locale module\nlib.locale()\n\nSetInterval(function()\nprint(locale('grand_theft_auto'))\nprint(locale('suspect_sex', locale('male')))\nend, 5000)","phrases#Phrases":"You can create a locale string that references other locales to construct a phrase, rather than calling locale multiple times.\n{\n\"hello\": \"hello %s\",\n\"my_name_is\": \"my name is %s\",\n\"hello_my_name_is\": \"${hello}! ${my_name_is}.\"\n}\n\nprint(locale('hello_my_name_is', 'doka', 'linden'))"}},"/ox_lib/Modules/Logger/Server":{"title":"Server","data":{"":"","liblogger#lib.logger":"lib.logger(source, event, message, ...)\n\nsource: number or string\nPreferably an active player id, otherwise an identifier, or wherever else it originated from.\n\n\nevent: string\nA name for the log event (i.e. the trigerring event or a description)\n\n\nmessage: string\nThe content for the log.\n\n\nvararg: string\nAdditional arguments are converted to tags for additional filtering and searching.","example#Example":"local vehicle = Ox.CreateVehicle(false, `sultanrs`, vector4(-56.479122, -1116.870362, 26.432250, 0.000030517578))\nlib.logger(-1, 'CreateVehicle', json.encode(vehicle))","datadog#Datadog":"","create-your-datadog-account#Create your Datadog account":"You will receive a free 14 day trial, otherwise refer to their pricing guide.\nFree accounts are limited, however logs will still be retained for 14 days.","create-an-api-key#Create an API key":"This is a UUID used to submit logs to your Datadog organisation.","config#Config":"Set your API key and Datadog site using the following convars.\nset datadog:key \"yourapikey\"\nset datadog:site \"datadoghq.com\"","grafana-loki#Grafana Loki":"Loki is a horizontally scalable, highly available, multi-tenant log aggregation system inspired by Prometheus.\nIt is designed to be very cost effective and easy to operate.\n\n\nHas free tier with some restrictions\nEasy to manage\nEasier to setup\nMostly managed by Grafana","create-your-grafana-account#Create your Grafana account":"","head-to-my-account#Head to My Account":"","setup-loki#Setup Loki":"Find the Loki section in your account panel, and click \"Details\".\nGenerate a password and save the API key, as well as your user and url.\n\n\nTo setup a grafana instance you'll need docker, and knowledge on containers or kubernetes.\nPlease find a guide to setup a grafana stack (min requirement grafana and grafana loki) and follow that.Once done, setup authentication and use the username and password securing your endpoint.\nBy default self-hosted loki instances do not provide any authentication layers and will require an external authentication layer such as NGINX basic auth or Cloudflare Access.","config-1#Config":"Use the following convars to set your logging service, endpoint, and authentication details.\nset ox:logger \"loki\"\nset loki:user \"<insert your user>\"\nset loki:password \"<insert the api key or password>\"\nset loki:endpoint \"<insert loki url without http:// or https://>\""}},"/ox_lib/Modules/Math/Shared":{"title":"Shared","data":{"":"","libmath#lib.math":"Extends the standard Lua math table with extra functions.\nmath = lib.math","mathtoscalars#math.toscalars":"Takes a string and returns a set of scalar values.\nmath.toscalars(input, min, max, round)\n\ninput: string\nmin?: number\nmax?: number\nround?: boolean\n\nReturn:\n...: number","mathtovector#math.tovector":"Takes a string or table and returns a vector value, or a number if only one value was found.\nmath.tovector(input, min, max, round)\n\ninput: string or table\nmin?: number\nmax?: number\nround?: boolean\n\nReturn:\nvalue: number or vector2 or vector3 or vector4","mathtorgba#math.torgba":"Takes a string or table and returns a vector value, or a number if only one value was found.\nValues are rounded and must be within the range of 0-255.\nmath.torgba(input)\n\ninput: string or table\n\nReturn:\nvalue: number or vector2 or vector3 or vector4","mathtohex#math.tohex":"Takes a number or string and formats it as a hexadecimal string.\nmath.tohex(n, upper)\n\nn: number or string\nupper?: boolean\n\nReturn:\nhex: string","mathgroupdigits#math.groupdigits":"Takes a number and formats it into grouped digits.\nmath.groupdigits(number, seperator)\n\nnumber: number\nseperator?: string\nDefault: ,\n\n\n\nReturn:\ngroupedDigits: string"}},"/ox_lib/Modules/Points/JavaScript/Client":{"title":"Points","data":{"":"Simple and centralised distance checking, supporting callbacks when entering, leaving, and standing in-range of set coordinates.\nPoint<T>({coords, distance, onEnter, onExit, nearby, args})\n\ncoords: number[]\ndistance: number\nonEnter?: function\nonExit?: function\nnearby?: function\nargs?: T\n\n\nimport { Point, cache } from '@overextended/ox_lib/client'\n\nfunction nearby(this: Point<{dunak: string}>) {\n// @ts-ignore\nDrawMarker(2, this.coords.x, this.coords.y, this.coords.z, 0, 0, 0, 0, 180, 0, 1, 1, 1, 200, 20, 20, 50, false, true, 2, false, null, null, false)\n\nif (this.currentDistance && this.currentDistance < 1 && IsControlJustReleased(0, 38)) {\nconsole.log('Inside marker', this.id)\nconsole.log(this.args?.dunak)\n}\n}\n\nconst point = new Point({\ncoords: GetEntityCoords(cache.ped, false),\ndistance: 5,\nnearby: nearby,\nargs: {\ndunak: 'nerd'\n}\n})\n\npoint.onEnter = () => {\nconsole.log('Entered range of point', point.id)\n}\n\npoint.onExit = () => {\nconsole.log('Left range of point', point.id)\n}"}},"/ox_lib/Modules/Points/Lua/Client":{"title":"Points","data":{"":"Simple and centralised distance checking, supporting callbacks when entering, leaving, and standing in-range of set coordinates.","cpoint#CPoint":"A table representing a point with the following properties.\nid: number\ncoords: vector3\ndistance: number\nThe distance for the player to be \"inside\" a point (i.e. the point's radius).\n\n\ncurrentDistance: number\nThe players current distance from the centre of the point.\n\n\nisClosest?: boolean\nremove: function()\nRemoves the point from the points registry.\n\n\nonEnter?: function(self: CPoint)\nFunction triggered when player gets within distance of the point\n\n\nonExit?: function(self: CPoint)\nFunction triggered when player goes beyond distance of the point\n\n\nnearby?: function(self: CPoint)\nFunction triggered on frame when within distance of the point","libpointsnew#lib.points.new":"lib.points.new(data)\n\ndata: table\ncoords: vector3\ndistance: number\n\n\n\nReturns:\npoint: CPoint","example#Example":"local point = lib.points.new({\ncoords = GetEntityCoords(cache.ped),\ndistance = 5,\ndunak = 'nerd',\n})\n\nfunction point:onEnter()\nprint('entered range of point', self.id)\nend\n\nfunction point:onExit()\nprint('left range of point', self.id)\nend\n\nfunction point:nearby()\nDrawMarker(2, self.coords.x, self.coords.y, self.coords.z, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, 1.0, 1.0, 1.0, 200, 20, 20, 50, false, true, 2, false, nil, nil, false)\n\nif self.currentDistance < 1 and IsControlJustReleased(0, 38) then\nprint('inside marker', self.id, 'dunak is a '.. self.dunak)\nend\nend","libpointsgetallpoints#lib.points.getAllPoints":"Get a table of all points created in the resource.\nlib.points.getAllPoints()\nReturn:\npoints: CPoint[]","libpointsgetnearbypoints#lib.points.getNearbyPoints":"Get an array of all points in range of the player.\nlib.points.getNearbyPoints()\nReturn:\nnearbyPoints: CPoint[]","libpointsgetclosestpoint#lib.points.getClosestPoint":"Get the data for the closest point to the player.\nlib.points.getClosestPoint()\nReturn:\nclosestPoint?: CPoint"}},"/ox_lib/Modules/Raycast/Client":{"title":"Client","data":{"":"","libraycastcam#lib.raycast.cam":"Starts a shapetest originating from the camera, extending to ~10m by default.\nlib.raycast.cam(flags, ignore, distance)\n\nflags?: number\nSee: https://docs.fivem.net/natives/?_0x377906D8A31E5586\nDefault: 511\n\n\nignore?: number\nA bit mask with bits 1, 2, 4, or 7 relating to collider types. 4 and 7 are usually used.\nDefault: 4\n\n\ndistance?: number\nDefault: 10\n\n\n\nReturn:\nhit: boolean\nWhether or not an entity was hit\n\n\nentityHit: number\nEntity handle of hit entity\n\n\nendCoords: vector3\nClosest coords to where the raycast hit\n\n\nsurfaceNormal: vector3\nNormal to the surface that was hit\n\n\nmaterialHash: number"}},"/ox_lib/Modules/Streaming/Client":{"title":"Client","data":{"":"Check if assets exist, such as models, and loads them into memory.\nThrows errors for invalid assets and returns true if the asset is loaded.","librequestanimdict#lib.requestAnimDict":"lib.requestAnimDict(dict, timeout)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestAnimDict(dict, timeout)\n\n\n\ndict: string\ntimeout?: number\nNumber of ticks to wait for the asset to load.\nDefault: 500","librequestanimset#lib.requestAnimSet":"lib.requestAnimSet(set, timeout)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestAnimSet(set, timeout)\n\n\n\nset: string\ntimeout?: number\nNumber of ticks to wait for the asset to load.\nDefault: 500","librequestmodel#lib.requestModel":"lib.requestModel(model, timeout)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestModel(model, timeout)\n\n\n\nmodel: string\ntimeout?: number\nNumber of ticks to wait for the asset to load.\nDefault: 500","librequeststreamedtexturedict#lib.requestStreamedTextureDict":"lib.requestStreamedTextureDict(dict, timeout)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestStreamedTextureDict(dict, timeout)\n\n\n\ndict: string\ntimeout?: number\nNumber of ticks to wait for the asset to load.\nDefault: 500","librequestnamedptfxasset#lib.requestNamedPtfxAsset":"lib.requestNamedPtfxAsset(ptFxName, timeout)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestNamedPtfxAsset(ptFxName, timeout)\n\n\n\nptFxName: string\ntimeout?: number\nNumber of ticks to wait for the asset to load.\nDefault: 500","librequestscaleformmovie#lib.requestScaleformMovie":"lib.requestScaleformMovie(scaleformName, timeout)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestScaleformMovie(scaleformName, timeout)\n\n\n\nscaleformName: string\ntimeout?: number\nNumber of ticks to wait for the asset to load.\nDefault: 500","librequestweaponasset#lib.requestWeaponAsset":"lib.requestWeaponAsset(weaponType, timeout, weaponResourceFlags, extraWeaponComponentFlags)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.requestWeaponAsset(weaponType, timeout, weaponResourceFlags, extraWeaponComponentFlags)\n\n\n\nweaponType: string | number\ntimeout?: number\nNumber of ticks to wait for the asset to load.\nDefault: 500\n\n\nweaponResourceFlags?: WeaponResourceFlags\nDefault: 31\n\n\nextraWeaponComponentFlags?: ExtraWeaponComponentFlags\nDefault: 0","weaponresourceflags#WeaponResourceFlags":"1 WRF_REQUEST_BASE_ANIMS\n2 WRF_REQUEST_COVER_ANIMS\n4 WRF_REQUEST_MELEE_ANIMS\n8 WRF_REQUEST_MOTION_ANIMS\n16 WRF_REQUEST_STEALTH_ANIMS\n32 WRF_REQUEST_ALL_MOVEMENT_VARIATION_ANIMS\n31 WRF_REQUEST_ALL_ANIMS","extraweaponcomponentflags#ExtraWeaponComponentFlags":"0 WEAPON_COMPONENT_NONE\n1 WEAPON_COMPONENT_FLASH\n2 WEAPON_COMPONENT_SCOPE\n4 WEAPON_COMPONENT_SUPP\n8 WEAPON_COMPONENT_SCLIP2\n16 WEAPON_COMPONENT_GRIP"}},"/ox_lib/Modules/Table/Shared":{"title":"Shared","data":{"":"Adds additional functions alongside the standard table library","libtablecontains#lib.table.contains":"lib.table.contains(tbl, value)\nChecks if table contains the given value. Only intended for simple values and unnested tables.\ntbl: table\nvalue: any\n\nReturn:\nisContained: boolean","libtablematches#lib.table.matches":"lib.table.matches(tableOne, tableTwo)\nCompares if two values are equal, iterating over tables and matching both keys and values.\ntableOne: table\ntableTwo: table\n\nReturn:\nmatches: boolean","libtabledeepclone#lib.table.deepclone":"Recursively clones a table to ensure no table references remain.\nlib.table.deepclone(tbl)\n\ntbl: table\n\nReturn:\nclonedTable: table","libtablemerge#lib.table.merge":"Merges two tables together. Duplicate keys will be added together if they are numbers, otherwise tableTwo's value will be used.\nlib.table.merge(tableOne, tableTwo)\n\ntableOne: table\ntableTwo: table\n\nReturn:\ntableOne: table","libtablefreeze#lib.table.freeze":"Makes a table read-only, preventing further modification. Unfrozen tables stored within table are still mutable.\nlib.table.freeze(tbl)\n\ntbl: table\n\nReturn:\nfrozenTable: table","libtableisfrozen#lib.table.isFrozen":"Returns true if tbl is set as read-only.\nlib.table.isFrozen(tbl)\n\ntbl: table\n\nReturn:\nisFrozen: boolean"}},"/ox_lib/Modules/VehicleProperties/Client":{"title":"Client","data":{"":"Mostly follows the format used by ESX and QBCore, with extra data such as damaged/missing props.\nhttps://github.com/overextended/ox_lib/blob/master/resource/vehicleProperties/client.lua#L5","libgetvehicleproperties#lib.getVehicleProperties":"lib.getVehicleProperties(vehicle)\n\nvehicle: number\nvehicle handle of the vehicle to get the properties for\n\n\n\n\n\n\nlib.getVehicleProperties(GetVehiclePedIsUsing(PlayerPedId()))\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nlib.getVehicleProperties(GetVehiclePedIsUsing(PlayerPedId()))","libsetvehicleproperties#lib.setVehicleProperties":"Requires the vehicle to belong to the client. Do not use NetworkRequestControlOfEntity.\nlib.setVehicleProperties(vehicle, props)\n\nvehicle: entity\nprops: table (object)\n\n\n\n\nRegisterNetEvent('ox_lib:setVehicleProperties', function(netid, data)\nlib.setVehicleProperties(NetToVeh(netid), data)\nend)\n\n\n\nimport lib from '@overextended/ox_lib/client'\n\nonNet('ox_lib:setVehicleProperties', (netid, data) => {\nlib.setVehicleProperties(NetToVeh(netid), data)\n})","recommended-usage#Recommended Usage":"The server should tell the owner of the entity to set properties, using the following trigger.\nTriggerClientEvent('ox_lib:setVehicleProperties', entityOwner, vehNetId, data)","vehicle-properties#Vehicle Properties":"model?: number\nplate?: string\nplateIndex?: number\nbodyHealth?: number\nengineHealth?: number\ntankHealth?: number\nfuelLevel?: number\noilLevel?: number\ndirtLevel?: number\ncolor1?: number or number[]\ncolor2?: number or number[]\npearlescentColor?: number\ninteriorColor?: number\ndashboardColor?: number\nwheelColor?: number\nwheelWidth?: number\nwheelSize?: number\nwheels?: number\nwindowTint?: number\nxenonColor?: number\nneonEnabled?: boolean[]\nneonColor?: number or number[]\nextras?: table<number | string, 0 | 1>\ntyreSmokeColor?: number or number[]\nmodSpoilers?: number\nmodFrontBumper?: number\nmodRearBumper?: number\nmodSideSkirt?: number\nmodExhaust?: number\nmodFrame?: number\nmodGrille?: number\nmodHood?: number\nmodFender?: number\nmodRightFender?: number\nmodRoof?: number\nmodEngine?: number\nmodBrakes?: number\nmodTransmission?: number\nmodHorns?: number\nmodSuspension?: number\nmodArmor?: number\nmodNitrous?: number\nmodTurbo?: number\nmodSubwoofer?: boolean\nmodSmokeEnabled?: boolean\nmodHydraulics?: boolean\nmodXenon?: boolean\nmodFrontWheels?: number\nmodBackWheels?: number\nmodCustomTiresF?: boolean\nmodCustomTiresR?: boolean\nmodPlateHolder?: number\nmodVanityPlate?: number\nmodTrimA?: number\nmodOrnaments?: number\nmodDashboard?: number\nmodDial?: number\nmodDoorSpeaker?: number\nmodSeats?: number\nmodSteeringWheel?: number\nmodShifterLeavers?: number\nmodAPlate?: number\nmodSpeakers?: number\nmodTrunk?: number\nmodHydrolic?: number\nmodEngineBlock?: number\nmodAirFilter?: number\nmodStruts?: number\nmodArchCover?: number\nmodAerials?: number\nmodTrimB?: number\nmodTank?: number\nmodWindows?: number\nmodDoorR?: number\nmodLivery?: number\nmodRoofLivery?: number\nmodLightbar?: number\nwindows?: number[]\ndoors?: number[]\ntyres?: table<number | string, 1 | 2>\nbulletProofTyres?: boolean"}},"/ox_lib/Modules/Version/Server":{"title":"Server","data":{"":"","libversioncheck#lib.versionCheck":"Compares the resource version to the latest published release on GitHub.\nlib.versionCheck(repository)\n\nrepository: string\n\n\n\n\nlib.versionCheck('overextended/ox_lib')\n\n\n\nimport lib from '@overextended/ox_lib/server'\n\nlib.versionCheck('overextended/ox_lib')\n\n\nUtilises GitHub's release API"}},"/ox_lib/Modules/Version/Shared":{"title":"Shared","data":{"":"","libcheckdependency#lib.checkDependency":"Check if a resource is using a specified version or higher, allowing for compatibility checks or throwing errors.\nlib.checkDependency(resource, version)\n\nresource: string\nversion: string\n\n\n\n\nif not lib.checkDependency('ox_lib', '1.5.0') then error() end\n\n\n\nimport lib from '@overextended/ox_lib/shared'\n// import { checkDependency } from '@overextended/ox_lib/shared'\n\nif (!lib.checkDependency('ox_lib', '1.5.0')) error()"}},"/ox_lib/Modules/Zones/Shared":{"title":"Shared","data":{"":"Faster alternative to PolyZone utilising glm.polygon.\nCurrently zones only have basic support on the server side. Some features will not work such as onEnter, onExit, and inside.","libzonespoly#lib.zones.poly":"lib.zones.poly(data)\n\ndata: table\npoints: vector3[]\nAll z values must match\n\n\nthickness?: number\nDefault: 4\n\n\nonEnter: function(self: table)\nonExit: function(self: table)\ninside: function(self: table)\ndebug?: boolean","libzonesbox#lib.zones.box":"lib.zones.box(data)\n\ndata: table\ncoords: vector3\nsize?: vector3\nDefault: vec3(4, 4, 4)\n\n\nrotation?: number\nAngle in degrees\n\n\nonEnter: function(self: table)\nonExit: function(self: table)\ninside: function(self: table)\ndebug?: boolean","libzonessphere#lib.zones.sphere":"lib.zones.sphere(data)\n\ndata: table\ncoords: vector3\nradius?: number\nDefault: 2\n\n\nonEnter: function(self: table)\nonExit: function(self: table)\ninside: function(self: table)\ndebug?: boolean","methods#Methods":"","remove#remove":"Zones can be deleted by using the remove method. The data will not be cleared from the script, and can be used to recreate a zone later.\nzone:remove()\n\nSetTimeout(500, function()\nlib.zones.poly(zone)\nend)","contains#contains":"Tests if a point exists inside the zone, returning a boolean.\nif zone:contains(vec3(1, 1, 1)) then\nprint('point is inside zone!')\nend","usage-examples#Usage Examples":"function onEnter(self)\nprint('entered zone', self.id)\nend\n\nfunction onExit(self)\nprint('exited zone', self.id)\nend\n\nfunction inside(self)\nprint('you are inside zone ' .. self.id)\nend\n\nlocal poly = lib.zones.poly({\npoints = {\nvec(413.8, -1026.1, 29),\nvec(411.6, -1023.1, 29),\nvec(412.2, -1018.0, 29),\nvec(417.2, -1016.3, 29),\nvec(422.3, -1020.0, 29),\nvec(426.8, -1015.9, 29),\nvec(431.8, -1013.0, 29),\nvec(437.3, -1018.4, 29),\nvec(432.4, -1027.2, 29),\nvec(424.7, -1023.5, 29),\nvec(420.0, -1030.2, 29),\nvec(409.8, -1028.4, 29),\n},\nthickness = 2,\ndebug = true,\ninside = inside,\nonEnter = onEnter,\nonExit = onExit\n})\n\nlocal sphere = lib.zones.sphere({\ncoords = vec3(442.5363, -1017.666, 28.65637),\nradius = 1,\ndebug = true,\ninside = inside,\nonEnter = onEnter,\nonExit = onExit\n})\n\nlocal box = lib.zones.box({\ncoords = vec3(442.5363, -1017.666, 28.65637),\nsize = vec3(1, 1, 1),\nrotation = 45,\ndebug = true,\ninside = inside,\nonEnter = onEnter,\nonExit = onExit\n})","zone-creation-script#Zone creation script":"You can use our builtin zone-creator with /zone - with poly, box or sphere as an argument.\nAvailable controls will be displayed on the right side.Zones will be saved to ox_lib/created_zones.lua with your chosen format.\n\n\nlocal poly = lib.zones.poly({\nname = poly,\npoints = {\nvec(447.9, -998.8, 25.8),\nvec(450.3, -998.2, 25.8),\nvec(449.9, -995.5, 25.8),\nvec(447.2, -995.6, 25.8),\nvec(446.3, -997.9, 25.8),\n},\nthickness = 2,\n})\n\n\n\n{\nname = poly,\npoints = {\nvec(447.9, -998.8, 25.8),\nvec(450.3, -998.2, 25.8),\nvec(449.9, -995.5, 25.8),\nvec(447.2, -995.6, 25.8),\nvec(446.3, -997.9, 25.8),\n},\nthickness = 2,\n},\n\n\n\nexports.ox_target:addPolyZone({\nname = poly,\npoints = {\nvec(447.9, -998.8, 25.8),\nvec(450.3, -998.2, 25.8),\nvec(449.9, -995.5, 25.8),\nvec(447.2, -995.6, 25.8),\nvec(446.3, -997.9, 25.8),\n},\nthickness = 2,\n})"}},"/ox_target":{"title":"Ox Target","data":{"":"A performant and flexible standalone targeting resource or \"third-eye\", with additional functionality for ox_inventory, ox_core, qb-core, and es_extended.","installation#Installation":"We strongly recommend referring to Guides for setting up Git, Node.js, and pnpm.","install-all-resource-dependencies#Install all resource dependencies":"ox_lib","download-a-release-or-clone-the-source-code#Download a release or clone the source code.":"git clone https://github.com/overextended/ox_target.git","config#Config":"Resource configuration is handled using convars.\n# Toggle targeting when pressing the hotkey, instead of holding it down.\nsetr ox_target:toggleHotkey 0\n\n# Change the key to enable targeting (https://docs.fivem.net/docs/game-references/input-mapper-parameter-ids/keyboard)\nsetr ox_target:defaultHotkey LMENU\n\n# Draw a sprite (circle) at the centroid of a zone.\nsetr ox_target:drawSprite 1\n\n# Enable built-in targeting options, e.g. toggling vehicle doors.\nsetr ox_target:defaults 1\n\n# Enable debugging / testing options, entity outlines, and a raycast indicator.\nsetr ox_target:debug 0\n\n# Enable / Disable leftclick to select options\nsetr ox_target:leftClick 1","supported-frameworks#Supported Frameworks":"These aren't necessary to run ox_target, but they will add additional features.\nox_core\nesx\nqb-core"}},"/ox_target/Functions/Client":{"title":"Client","data":{"":"All exports with the options argument expect a table with the targeting properties here.","disabletargeting#disableTargeting":"Toggle the availability of the targeting menu.\nexports.ox_target:disableTargeting(state)\n\nstate: boolean","addglobalobject#addGlobalObject":"Creates new targetable options for all Object entity types.\nexports.ox_target:addGlobalObject(options)\n\noptions: table","removeglobalobject#removeGlobalObject":"Removes all options from the global Object list with the option names.\nexports.ox_target:removeGlobalObject(optionNames)\n\noptionNames: string or string[]","addglobalped#addGlobalPed":"Creates new targetable options for all Ped entity types (excluding players).\nexports.ox_target:addGlobalPed(options)\n\noptions: table","removeglobalped#removeGlobalPed":"Removes all options from the global Ped list with the option names.\nexports.ox_target:removeGlobalPed(optionNames)\n\noptionNames: string or string[]","addglobalplayer#addGlobalPlayer":"Creates new targetable options for all Player entities.\nexports.ox_target:addGlobalPlayer(options)\n\noptions: table","removeglobalplayer#removeGlobalPlayer":"Removes all options from the global Ped list with the option names.\nexports.ox_target:removeGlobalPlayer(optionNames)\n\noptionNames: string or string[]","addglobalvehicle#addGlobalVehicle":"Creates new targetable options for all Vehicle entity types.\nexports.ox_target:addGlobalVehicle(options)\n\noptions: table","removeglobalvehicle#removeGlobalVehicle":"Removes all options from the global Vehicle list with the option names.\nexports.ox_target:removeGlobalVehicle(optionNames)\n\noptionNames: string or string[]","addmodel#addModel":"Creates new targetable options for a specific model or list of models.\nexports.ox_target:addModel(models, options)\n\nmodels: number or number[]\noptions: table","removemodel#removeModel":"Removes all options from the models list with the option names.\nexports.ox_target:removeModel(models, optionNames)\n\nmodels: number or number[]\noptionNames: string or string[]","addentity#addEntity":"Creates new targetable options for a specific network id (see NetworkGetNetworkIdFromEntity).\nexports.ox_target:addEntity(netIds, options)\n\nnetIds: number or number[]\noptions: table","removeentity#removeEntity":"Removes all options from the networked entities list with the option names.\nexports.ox_target:removeEntity(netIds, optionNames)\n\nnetIds: number or number[]\noptionNames: string or string[]","addlocalentity#addLocalEntity":"Creates new targetable options for a specific entity or list of entities.\nexports.ox_target:addLocalEntity(entities, options)\n\nentities: number or number[]\noptions: table","removelocalentity#removeLocalEntity":"Removes all options from the entities list with the option names.\nexports.ox_target:removeLocalEntity(entities, optionNames)\n\nentities: number or number[]\noptionNames: string or string[]","addspherezone#addSphereZone":"Creates a new targetable sphere zone.\nexports.ox_target:addSphereZone(parameters)\n\nparameters: table\ncoords: vector\nradius: number\ndebug?: boolean\ndrawSprite?: boolean\noptions: table\n\n\n\nReturns: number","addboxzone#addBoxZone":"Creates a new targetable box zone.\nexports.ox_target:addBoxZone(parameters)\n\nparameters: table\ncoords: vector\nsize: vector3\nrotation: number\ndebug?: boolean\ndrawSprite?: boolean\noptions: table\n\n\n\nReturns: number","removezone#removeZone":"Removes a targetable zone with the given id (returned by addBoxZone/addSphereZone).\nexports.ox_target:removeZone(id)"}},"/ox_target/Options":{"title":"Options","data":{"":"When creating a targetable option you must send an array of options with the following properties.","options#Options":"label: string\nname?: string\nAn identifier used when removing an option.\n\n\nicon?: string\nName of a Font Awesome icon.\n\n\niconColor?: string\ndistance?: number\nbones?: string or string[]\nA bone name or array of bone names (see GetEntityBoneIndexByName).\n\n\ngroups?: string or string[] or table<string, number>\nA group, array of groups, or pairs of groups-grades required to show the option.\nGroups are framework dependent, and may refer to jobs, gangs, etc.\n\n\nitems?: string or string[] or table<string, number>\nAn item, array of items, or pairs of items-count required to show the option.\nItems are framework dependent.\n\n\nanyItem?: boolean\nOnly require a single item from the items table to exist.\n\n\ncanInteract?: function(entity, distance, coords, name, bone)\nOptions will always display if this is undefined.\n\n\nonSelect?: function(data)\nexport?: string\nevent?: string\nserverEvent?: string\ncommand?: string","option-effect#Option effect":"When selecting an option it will trigger a single action, in order of priority:\nonSelect function\nexport\nevent\nserver event\ncommand"}},"/oxmysql":{"title":"OxMySQL","data":{"":"A replacement of mysql-async and ghmattimysql with expanded API and improved compatibility for MySQL 8.","mysql-or-mariadb#MySQL or MariaDB?":"Most resources for FiveM were designed to be used with MySQL 5.7 and may hit compatibility issues when using MySQL 8, i.e.\nMore reserved keywords, like 'stored' and 'group'.\nLongtext / JSON fields do not support default values.\n\nMariaDB is highly recommended for compatibility, and improved performance (over all versions of MySQL).","should-i-use-xampp#Should I use XAMPP?":"No. XAMPP is a webserver stack intended to be used for development, allowing easy local development and testing.\nDo not setup XAMPP just to run your database, and install MariaDB directly instead.","installation#Installation":"","download-the-latest-release#Download the latest release.":"","configure-your-server#Configure your server":"When using convars do not replicate sensitive information to the client.\nset will only be set on the server, while setr is replicated.\n\nStart by opening your server configuration (i.e. server.cfg) and adding start oxmysql before any of its dependents (usually it's the first resource you start).\nSet a mysql connection string using either of the following formats, using your server authentication details and target database.\n\n\nset mysql_connection_string \"mysql://root:12345@localhost:3306/es_extended\"\nset mysql_connection_string \"user=root;password=12345;host=localhost;port=3306;database=es_extended\"\n\nCertain special characters are reserved or unsupported depending on your connection string.\nAvoid using these characters ; , / ? : @ & = + $ #, and try swapping connection string format.","slow-query-warnings#Slow query warnings":"By default you will receive warnings if a query took ~150ms to complete, however\nQuery time is calculated on fxserver based on response time, and may not be entirely accurate.\nServer hitches may delay the query response, and may not indicate a database issue.\nExcessive queries in a short timeframe may report with higher response times.\n\nYou can adjust the minimum response time with a convar.\nset mysql_slow_query_warning 150","debug#Debug":"Enabling the debug option will print all queries in the server console; you can also use an array to only print from a list of resources instead.\nset mysql_debug true\nset mysql_debug [\n\"ox_core\",\n\"ox_inventory\"\n]\nThis value can be changed without restarting oxmysql, and you can temporarily modify the list with commands.\noxmysql_debug remove ox_core\noxmysql_debug add ox_core","mysql-async-compatibility#mysql-async compatibility":"The mysql-async directory must be deleted to properly provide support.\n🗹 Supports server_script '@mysql-async/lib/MySQL.lua'.\n🗹 Supports MySQL.Sync and MySQL.Async methods.\n☐ Raw exports are not supported (i.e. exports['mysql-async].mysql_execute).\n☐ Multi-statements are disabled for security reasons (see #102).","ghmattimysql-compatibility#ghmattimysql compatibility":"The ghmattimysql resource must be stopped to properly provide support.\n🗹 Supports exports.ghmattimysql.execute and other similar exports.\n🗹 Supports exports.ghmattimysql.executeSync and other similar exports.","usage#Usage":"Resources can import oxmysql methods by including our library, granting some type-checking and minor performance improvements over raw export calls.","lua#Lua":"Modify fxmanifest.lua for your resource, and add the following above any other script files.\nserver_script '@oxmysql/lib/MySQL.lua'\nIf you're using Lua Language Server you can get access to basic types and intellisense.\n\"Lua.workspace.library\": [\n\"C:/pathtoserver/resources/oxmysql/lib/define.lua\",\n]","javascript#JavaScript":"You can use raw exports, or install our npm package for intellisense and similar usage as Lua.\n# With pnpm\npnpm add @overextended/oxmysql\n\n# With Yarn\nyarn add @overextended/oxmysql\n\n# With npm\nnpm install @overextended/oxmysql\nImport the oxmysql object into your resource.\nimport { oxmysql as MySQL } from '@overextended/oxmysql';","upserting#Upserting":"When uncertain if a row should be inserted into the database, or an existing row should be updated, queries should check for duplicate keys.\nMySQL.prepare('INSERT INTO ox_inventory (owner, name, data) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE data = VALUES(data)', { owner, dbId, inventory })\nThis is preferred over checking the existence of a row, then inserting or updating depending on the result.\nFurthermore, unlike using 'REPLACE INTO', the row is not deleted and re-inserted."}},"/oxmysql/Functions/insert":{"title":"insert","data":{"":"Inserts a new entry into the database and returns the insert id for the row, if valid.","promise#Promise":"local id = MySQL.insert.await('INSERT INTO `users` (identifier, firstname, lastname) VALUES (?, ?, ?)', {\nidentifier, firstName, lastName\n})\n\nprint(id)\n\n\n\nconst id = await MySQL.insert('INSERT INTO `users` (identifier, firstname, lastname) VALUES (?, ?, ?)', [\nidentifier, firstName, lastName\n])\n\nconsole.log(id)\n\n\nAliases\nMySQL.Sync.insert\nexports.ghmattimysql.executeSync\nexports.oxmysql.insert_async","callback#Callback":"MySQL.insert('INSERT INTO `users` (identifier, firstname, lastname) VALUES (?, ?, ?)', {\nidentifier, firstName, lastName\n}, function(id)\nprint(id)\nend)\n\n\n\nMySQL.insert('INSERT INTO `users` (identifier, firstname, lastname) VALUES (?, ?, ?)', [\nidentifier, firstName, lastName\n], (id) => {\nconsole.log(id)\n})\n\n\nAliases\nMySQL.Async.insert\nexports.ghmattimysql.execute\nexports.oxmysql.insert"}},"/oxmysql/Functions/prepare":{"title":"prepare","data":{"":"Prepare can be used to execute frequently called queries faster and accepts multiple sets of parameters to be used with a single query.\nDate will not return the datestring commonly used in FiveM\nTINYINT 1 and BIT will not return a boolean\nYou can only use ? value placeholders, ?? column placeholders and named placeholders will throw an error\n\nUnlike rawExecute, the SELECT statement will return a column, row, or array of rows depending on the number of columns and rows selected.","promise#Promise":"local response = MySQL.prepare.await('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\nidentifier\n})\n\n\nprint(json.encode(response, { indent = true, sort_keys = true }))\n\n\n\nconst response = await MySQL.prepare('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\nidentifier\n])\n\nconsole.log(JSON.stringify(response))\n\n\nAliases\nexports.oxmysql.prepare_async","callback#Callback":"MySQL.prepare('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\nidentifier\n}, function(response)\nprint(json.encode(response, { indent = true, sort_keys = true }))\nend)\n\n\n\nMySQL.prepare('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\nidentifier\n], (response) => {\nconsole.log(JSON.stringify(response))\n})\n\n\nAliases\nexports.oxmysql.prepare"}},"/oxmysql/Functions/query":{"title":"query","data":{"":"When selecting data, returns all matching rows and columns; otherwise, returns data like insertId, affectedRows, etc.","promise#Promise":"local response = MySQL.query.await('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\nidentifier\n})\n\nif response then\nfor i = 1, #response do\nlocal row = response[i]\nprint(row.firstname, row.lastname)\nend\nend\n\n\n\nconst response = await MySQL.query('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\nidentifier\n])\n\nif (response) {\nresponse.forEach((row) => {\nconsole.log(row.identifier, row.firstname, row.lastname)\n})\n}\n\n\nAliases\nMySQL.Sync.fetchAll\nexports.ghmattimysql.execute\nexports.oxmysql.query_async","callback#Callback":"MySQL.query('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\nidentifier\n}, function(response)\nif response then\nfor i = 1, #response do\nlocal row = response[i]\nprint(row.firstname, row.lastname)\nend\nend\nend)\n\n\n\nMySQL.query('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\nidentifier\n], (response) => {\nif (response) {\nresponse.forEach((row) => {\nconsole.log(row.firstname, row.lastname)\n})\n}\n})\n\n\nAliases\nMySQL.Async.fetchAll\nexports.ghmattimysql.execute\nexports.oxmysql.query"}},"/oxmysql/Functions/rawExecute":{"title":"rawExecute","data":{"":"rawExecute can be used to execute frequently called queries faster and accepts multiple sets of parameters to be used with a single query.\nDate will not return the datestring commonly used in FiveM\nTINYINT 1 and BIT will not return a boolean\nYou can only use ? value placeholders, ?? column placeholders and named placeholders will throw an error\n\nUnlike prepare, the SELECT statement will always return an array of rows.\nWhen using SELECT, the return value will match query, single, or scalar depending on the number of columns and rows selected.","promise#Promise":"local response = MySQL.rawExecute.await('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\nidentifier\n})\n\n\nprint(json.encode(response, { indent = true, sort_keys = true }))\n\n\n\nconst response = await MySQL.rawExecute('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\nidentifier\n])\n\nconsole.log(JSON.stringify(response))\n\n\nAliases\nexports.oxmysql.rawExecute_async","callback#Callback":"MySQL.rawExecute('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', {\nidentifier\n}, function(response)\nprint(json.encode(response, { indent = true, sort_keys = true }))\nend)\n\n\n\nMySQL.rawExecute('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ?', [\nidentifier\n], (response) => {\nconsole.log(JSON.stringify(response))\n})\n\n\nAliases\nexports.oxmysql.rawExecute"}},"/oxmysql/Functions/scalar":{"title":"scalar","data":{"":"Returns the first column for a single row.","promise#Promise":"local firstName = MySQL.scalar.await('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\nidentifier\n})\n\nprint(firstName)\n\n\n\nconst firstName = await MySQL.scalar('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', [\nidentifier\n])\n\nconsole.log(firstName)\n\n\nAliases\nMySQL.Sync.fetchScalar\nexports.ghmattimysql.scalar\nexports.oxmysql.scalar_async","callback#Callback":"MySQL.scalar('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\nidentifier\n}, function(firstName)\nprint(firstName)\nend)\n\n\n\nMySQL.scalar('SELECT `firstname` FROM `users` WHERE `identifier` = ? LIMIT 1', [\nidentifier\n], (firstName) => {\nconsole.log(firstName)\n})\n\n\nAliases\nMySQL.Async.fetchScalar\nexports.ghmattimysql.scalar\nexports.oxmysql.scalar"}},"/oxmysql/Functions/single":{"title":"single","data":{"":"Returns all selected columns for a single row.","promise#Promise":"local row = MySQL.single.await('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\nidentifier\n})\n\nif not row then return end\n\nprint(row.firstname, row.lastname)\n\n\n\nconst row = await MySQL.single('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ? LIMIT 1', [\nidentifier\n])\n\nif (!row) return;\n\nconsole.log(row.firstname, row.lastname)\n\n\nAliases\nexports.oxmysql.single_async","callback#Callback":"MySQL.single('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ? LIMIT 1', {\nidentifier\n}, function(row)\nif not row then return end\n\nprint(row.firstname, row.lastname)\nend)\n\n\n\nMySQL.single('SELECT `firstname`, `lastname` FROM `users` WHERE `identifier` = ? LIMIT 1', [\nidentifier\n], (row) => {\nif (!row) return;\n\nconsole.log(row.firstname, row.lastname)\n})\n\n\nAliases\nexports.oxmysql.single"}},"/oxmysql/Functions/transaction":{"title":"transaction","data":{"":"A transaction executes multiple queries and commits them only if all succeed.\nIf one fails, none of the queries are committed.The return value is a boolean, which is the result of the transaction.","specific-format#Specific format":"When using this format, you must pass an array containing sets of queries and parameters to the transaction method.\nIn this case, your queries do not necessarily match and the values are unique to each query.\n-- You might rename \"values\" as \"parameters\" for mysql-async compatibility.\nlocal queries = {\n{ query = 'INSERT INTO `test` (id) VALUES (?)', values = { 1 }},\n{ query = 'INSERT INTO `test` (id, name) VALUES (?, ?)', values = { 2, 'bob' }},\n}\n\n-- You can also pass an array of arrays.\nlocal queries = {\n{ 'INSERT INTO `test` (id) VALUES (?)', { 1 } },\n{ 'INSERT INTO `test` (id, name) VALUES (?, ?)', { 2, 'bob' } },\n}","shared-format#Shared format":"When using this format, you must pass an array containing queries and a set containing shared parameters to the transaction method.\nIn this case, your queries do not necessarily match and the values are unique to each query.\n-- You might rename \"values\" as \"parameters\" for mysql-async compatibility.\nlocal queries = {\n'INSERT INTO `test` (id, name) VALUES (@someid, @somename)',\n'SET `name` = @newname IN `test` WHERE `id` = @someid'\n}\n\nlocal values = {\nsomeid = 2,\nsomename = 'John Doe',\nnewname = 'John Notdoe'\n}","promise#Promise":"local success = MySQL.transaction.await(queries, values --[[leave nil for specific format]])\nprint(success)\n\n\n\nconst success = await MySQL.transaction(queries, values /*leave nil for specific format*/)\nconsole.log(success)\n\n\nAliases\nMySQL.Sync.transaction\nexports.ghmattimysql.transaction\nexports.oxmysql.transaction_async","callback#Callback":"-- specific\nMySQL.transaction(queries, values, function(success)\nprint(success)\nend)\n\n-- shared\nMySQL.transaction(queries, function(success)\nprint(success)\nend)\n\n\n\n// specific\nMySQL.transaction(queries, (success) => {\nconsole.log(success)\n})\n\n// shared\nMySQL.transaction(queries, values, (success) => {\nconsole.log(success)\n})\n\n\nAliases\nMySQL.Async.transaction\nexports.ghmattimysql.transaction\nexports.oxmysql.transaction","transaction-isolation-level#Transaction Isolation Level":"This can be set through the convar mysql_transaction_isolation_level, and is an integer ranging from 1-4.\nThe default value is 2.\nConvar Value\tResult\t1\tRepeatable Read\t2\tRead Committed\t3\tRead Uncommitted\t4\tSerializable"}},"/oxmysql/Functions/update":{"title":"update","data":{"":"Returns the number of rows affected by the query.","promise#Promise":"local affectedRows = MySQL.update.await('UPDATE users SET firstname = ? WHERE identifier = ?', {\nnewName, identifier\n})\n\nprint(affectedRows)\n\n\n\nconst affectedRows = await MySQL.update('UPDATE users SET firstname = ? WHERE identifier = ?', [\nnewName, identifier\n])\n\nconsole.log(affectedRows)\n\n\nAliases\nMySQL.Sync.execute\nexports.ghmattimysql.executeSync\nexports.oxmysql.update_async","callback#Callback":"MySQL.update('UPDATE users SET firstname = ? WHERE identifier = ?', {\nnewName, identifier\n}, function(affectedRows)\nprint(affectedRows)\nend)\n\n\n\nMySQL.update('UPDATE users SET firstname = ? WHERE identifier = ?', [\nnewName, identifier\n], (affectedRows) => {\nconsole.log(affectedRows)\n})\n\n\nAliases\nMySQL.Async.execute\nexports.ghmattimysql.execute\nexports.oxmysql.update"}},"/oxmysql/benchmark":{"title":"Benchmark","data":{"":"-- Internal benchmark\nLow: 0.1222ms | Avg: 0.14188357ms | Total: 1418.8357ms (10000 queries)\n\n-- Round-trip-time for exports\nLow: 0.1997ms | Avg: 0.25898800ms | Total: 2589.8800ms (10000 queries)","lua-54#Lua (5.4)":"local val = 10000\nRegisterCommand('luasync', function()\nlocal queryTimesLocal = {}\nlocal result\nMySQL.prepare.await('SELECT identifier from users WHERE lastname = ?', {'Linden'})\n\nfor i=1, val do\nlocal time = os.nanotime()\nlocal r = MySQL.prepare.await('SELECT identifier from users WHERE lastname = ?', {'Linden'})\nqueryTimesLocal[#queryTimesLocal+1] = (os.nanotime() - time) / 1000000\nif i==1 then result = r end\nend\n\nlocal queryMsLow, queryMsSum = 1000, 0\n\nfor _, v in pairs(queryTimesLocal) do queryMsSum = queryMsSum + v end\nfor _, v in pairs(queryTimesLocal) do\nif v < queryMsLow then queryMsLow = v end\nend\n\nlocal averageQueryTime = queryMsSum / #queryTimesLocal\nprint(json.encode(result))\nprint('Low: '.. queryMsLow ..'ms | Avg: '..averageQueryTime..'ms | Total: '..queryMsSum..'ms ('..#queryTimesLocal..' queries)')\nend)","javascript#JavaScript":"const val = 10000;\nRegisterCommand('jssync', async () => {\nconst queryTimesLocal = [];\nlet result;\nawait exports.oxmysql.prepare_async('SELECT identifier from users WHERE lastname = ?', ['Linden']);\n\nfor (let i = 0; i < val; i++) {\nconst startTime = process.hrtime();\nconst r = await exports.oxmysql.prepare_async('SELECT identifier from users WHERE lastname = ?', ['Linden']);\nqueryTimesLocal.push(process.hrtime(startTime)[1] / 1000000);\nif (i === 0) result = r;\n}\n\nconst queryMsSum = queryTimesLocal.reduce((a, b) => a + b, 0);\nconst queryMsLow = queryTimesLocal.sort((a, b) => a - b)[0];\nconst averageQueryTime = queryMsSum / queryTimesLocal.length;\n\nconsole.log(result);\nconsole.log(\n'Low: ' +\nqueryMsLow +\n'ms | Avg: ' +\naverageQueryTime +\n'ms | Total: ' +\nqueryMsSum +\n'ms (' +\nqueryTimesLocal.length +\n' queries)'\n);\n});"}},"/oxmysql/issues":{"title":"Common Issues","data":{"":"","unable-to-establish-a-connection#Unable to establish a connection":"This is usually the result of incorrect database settings or your password containing reserved characters.\n; , / ? : @ & = + $ # are reserved.\nEnsure you have entered the correct database settings in the mysql_connection_string convar. You can try using the\nsemicolon-separated format if your password contains reserved characters.","no-such-export--in-resource-oxmysql#No such export ... in resource oxmysql":"Download the latest release build (not the source code) of oxmysql.\nEnsure it is starting before any resources that require it.","numbers-treated-as-string#Numbers treated as string":"To resolve this issue simply enable decimalNumbers in your connection string, ie. mysql://root@localhost/essentialmode?decimalNumbers=true.\nJavaScript treats all numbers as floats, so a double or decimal value will be cast as a float with this setting.\nNumbers will have less precision when this setting is enabled."}},"/oxmysql/placeholders":{"title":"Placeholders","data":{"":"Placeholders allow for query parameters to be safely executed, preventing common SQL injection methods.Parameters can be passed an an array or map (referred to as named named parameters).\nlocal identifier = 'license:abc123'\nlocal group = 'admin'\n\nMySQL.scalar('SELECT `username` FROM `users` WHERE `identifier` = ? AND `group` = ?', { identifier, group })\n\n-- Named placeholders (deprecated)\nMySQL.scalar('SELECT `username` FROM `users` WHERE `identifier` = @identifier AND `group` = @group', {\ngroup = group\nidentifier = identifier\n})\nThese are distinct from prepared statements which are handled by the MySQL server; you can use MySQL.prepare for more optimised and secure queries."}},"/oxmysql/ui":{"title":"Using the Debug UI","data":{"":"The debug UI lets you easily see all the queries that have been executed by resources, query response times, and per-resource statistics.\nYou should only enable this during production, or with a small player count - for larger servers, look into builtin MySQL logging.Before using the UI first you have to make sure you have the mysql_ui convar set to true:\nset mysql_ui true\nAlso make sure that you have command or command.mysql ace permission access, then you should be able to use the mysql command in game.\nYou do not need to have the mysql_debug enabled to use the debug ui.","main-page#Main page":"The main page shows you the resources that ran queries where you can filter them through a search bar, your general data\nalong side a pie chart which shows what resources took the most query time.","resource-page#Resource page":"The resource page shows you all the queries and their execution time inside a table that the resource previously ran,\nalongside the total amount of the queries, execution time and slow queries for the selected resource.Columns can be sorted by ascending and descending order, and hovering over a query will display the full query inside a tooltip.\nQueries that exceed mysql_slow_query_warning (default 150ms) are displayed in orange.\nFor demonstation purposes the mysql_slow_query_warning convar was set to 5 here."}},"/guides/nodejs":{"title":"Node.js","data":{"":"Node.js is a JavaScript runtime and is used for building applications. In the context of FiveM it is necessary to bundle resources into a single package that can be ran on both the server and client.\nDownload and install the LTS version of Node.js.\nOpen a command-line terminal (e.g. Terminal, Command Prompt).\nEnter node --version to confirm successful installation."}},"/guides/vscode":{"title":"VS Code","data":{"":"Visual Studio Code is our recommended editor when working with Lua.","recommended-extensions#Recommended extensions":"Extensions let you add languages, debuggers, and other tools to VS Code - improving your developer experience.","sumnekolua#sumneko.lua":"Lua Language Server provides numerous language features to make development easier and faster, e.g.\nAnnotations\nAutocompletion\nCode formatting\nDiagnostics/warnings\nDynamic type checking\nSyntax checking","overextendedcfxlua-vscode#overextended.cfxlua-vscode":"Works alongside Lua Language Server to provide function and type declarations from Cfx's Lua runtime, Lua dialect, environment globals, and game natives."}},"/ox_inventory/Guides/shops":{"title":"Creating shops","data":{"":"Builtin shops are defined in data/shops.lua, and more can be added here to benefit from the built-in markers or zones support.","shop-definition#Shop definition":"{\nGeneral = {\nname = 'Shop',\nblip = {\nid = 59,\ncolour = 69,\nscale = 0.8\n},\ninventory = {\n{ name = 'burger', price = 10 },\n{ name = 'water', price = 10 },\n{ name = 'cola', price = 10 },\n},\nlocations = {\nvec3(25.7, -1347.3, 29.49),\n},\ntargets = {\n-- Shop using a BoxZone\n{\nloc = vec3(25.06, -1347.32, 29.5),\nlength = 0.7,\nwidth = 0.5,\nheading = 0.0,\nminZ = 29.5,\nmaxZ = 29.9,\ndistance = 1.5\n},\n-- Shop using a ped\n{\nped = `mp_m_shopkeep_01`,\nscenario = 'WORLD_HUMAN_AA_COFFEE',\nloc = vec3(24.407, -1347.283, 28.497),\nheading = 270.311,\n},\n}\n}\n}\n\nname: string\nThe label to display when the shop is open.\n\n\nblip?: table\nCreates a blip with the given settings. Leave it undefined for no blip to be created.\nid: number\ncolour: number\nscale: number\n\n\ngroups?: table\nKey-value pairs of job name and minimum grade to access the shop.\n{[\"police\"] = 0, [\"ambulance\"] = 2}\n\n\n\n\ninventory: table\nname: string\nprice: number\ncurrency?: string\nItem to be used as currency.\n\n\ncount?: number\nAmount of the item in the stock.\n\n\nlicense?: string\nLicense required to purchase the item.\n\n\nmetadata?: table\ngrade?: number | number[]\nGrade required to purchase the item.\n\n\n\n\nlocations?: vector3[]\nAn array of coordinates to create unique instances of the shop archetype at, using markers.\n\n\ntargets?: table[]\nAn array of target settings to create unique instances of the shop archetype at, using peds or BoxZones (PolyZone data structure).\n\n\nmodel?: number[]\nAn array of models that can be targetted to open a shop. Used for vending machines.\n\n\n\nTargets and model are only available when using a targeting resource like ox_target.","register-during-runtime#Register during runtime":"Shops can be added using exports.ox_inventory:RegisterShop on the server, however they cannot utilise any client-only features.\nBlips, markers, and zones will not be created.\nMust use \"locations\" and not \"targets\" to define each shop using the archetype.\n\nExample:\nexports.ox_inventory:RegisterShop('TestShop', {\nname = 'Test shop',\ninventory = {\n{ name = 'burger', price = 10 },\n{ name = 'water', price = 10 },\n{ name = 'cola', price = 10 },\n},\nlocations = {\nvec3(223.832962, -792.619751, 30.695190),\n},\ngroups = {\npolice = 0\n},\n})"}}}